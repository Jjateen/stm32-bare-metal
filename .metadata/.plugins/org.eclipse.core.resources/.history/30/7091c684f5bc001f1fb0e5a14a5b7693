#include "stm32f4xx.h"
#include <stdio.h>

// Definitions
#define GPIOAEN (1U << 0)         // Enable GPIOA clock
#define USART2EN (1U << 17)       // Enable USART2 clock
#define SYS_FREQ 16000000         // System frequency
#define APB1_CLK SYS_FREQ         // APB1 peripheral clock frequency
#define UART_BAUDRATE 9600        // UART baud rate

// Function prototypes
void uart2_rxtx_init(void);
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate);
int _write(int file, char *ptr, int len);

int main(void) {
    // Initialize UART
    uart2_rxtx_init();

    // Send a test message
    printf("UART initialized successfully!\n");

    while (1) {
        // Application loop
    }
}

// UART Initialization
void uart2_rxtx_init(void) {
    // Enable clocks
    RCC->AHB1ENR |= GPIOAEN;      // Enable GPIOA clock
    RCC->APB1ENR |= USART2EN;     // Enable USART2 clock

    // Configure PA2 and PA3 for USART2 (Alternate Function Mode)
    GPIOA->MODER &= ~((1U << 4) | (1U << 5) | (1U << 6) | (1U << 7)); // Clear bits
    GPIOA->MODER |= (2U << 4) | (2U << 6);                            // Set to AF mode

    // Set Alternate Function to AF7 (USART2)
    GPIOA->AFR[0] |= (7U << 8) | (7U << 12);

    // Configure USART2
    uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
    USART2->CR1 = USART_CR1_TE | USART_CR1_RE;  // Enable Transmit and Receive
    USART2->CR1 |= USART_CR1_UE;                // Enable USART2
}

// Set UART Baud Rate
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate) {
    USARTx->BRR = compute_uart_bd(PeriphClk, Baudrate);
}

// Compute Baud Rate Divisor
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate) {
    return (uint16_t)((PeriphClk + (Baudrate / 2U)) / Baudrate);
}

// Redirect printf to USART2
int _write(int file, char *ptr, int len) {
    for (int i = 0; i < len; i++) {
        while (!(USART2->SR & USART_SR_TXE)); // Wait until TXE is empty
        USART2->DR = *ptr++;                 // Send data
    }
    return len;
}
