
hc05_relays.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ac  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000440  08000448  00001448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000440  08000440  00001448  2**0
                  CONTENTS
  4 .ARM          00000000  08000440  08000440  00001448  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000440  08000448  00001448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000440  08000440  00001440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000444  08000444  00001444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000448  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000448  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003eb  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000014a  00000000  00000000  00001863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  000019b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000003f  00000000  00000000  00001a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000db6d  00000000  00000000  00001a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006dc  00000000  00000000  0000f5bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f557  00000000  00000000  0000fc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005f1ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c4  00000000  00000000  0005f234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0005f2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000428 	.word	0x08000428

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000428 	.word	0x08000428

080001d4 <UART_Read>:
//PA5 - Relay Din
void UART_Init();
char UART_Read();
void UART_Write(char data);

char UART_Read() {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	while (!(USART1->SR & 0X0020)) {
 80001d8:	bf00      	nop
 80001da:	4b07      	ldr	r3, [pc, #28]	@ (80001f8 <UART_Read+0x24>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f003 0320 	and.w	r3, r3, #32
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d0f9      	beq.n	80001da <UART_Read+0x6>
	}
	return USART1->DR;
 80001e6:	4b04      	ldr	r3, [pc, #16]	@ (80001f8 <UART_Read+0x24>)
 80001e8:	685b      	ldr	r3, [r3, #4]
 80001ea:	b2db      	uxtb	r3, r3

}
 80001ec:	4618      	mov	r0, r3
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	40011000 	.word	0x40011000

080001fc <UART_Write>:

void UART_Write(char data) {
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
	while (!(USART1->SR & 0X0080)) {
 8000206:	bf00      	nop
 8000208:	4b07      	ldr	r3, [pc, #28]	@ (8000228 <UART_Write+0x2c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0f9      	beq.n	8000208 <UART_Write+0xc>
	}
	USART1->DR = (data & 0xff);
 8000214:	4a04      	ldr	r2, [pc, #16]	@ (8000228 <UART_Write+0x2c>)
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	6053      	str	r3, [r2, #4]
}
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	40011000 	.word	0x40011000

0800022c <UART_Init>:

void UART_Init() {
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
	//enable the clock access for GPIOA,GPIOB
	RCC->AHB1ENR |= (1U << 0); //GPIO A
 8000230:	4b40      	ldr	r3, [pc, #256]	@ (8000334 <UART_Init+0x108>)
 8000232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000234:	4a3f      	ldr	r2, [pc, #252]	@ (8000334 <UART_Init+0x108>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= (1U << 1); //GPIO B
 800023c:	4b3d      	ldr	r3, [pc, #244]	@ (8000334 <UART_Init+0x108>)
 800023e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000240:	4a3c      	ldr	r2, [pc, #240]	@ (8000334 <UART_Init+0x108>)
 8000242:	f043 0302 	orr.w	r3, r3, #2
 8000246:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB2ENR |= (1U << 4); //USART1
 8000248:	4b3a      	ldr	r3, [pc, #232]	@ (8000334 <UART_Init+0x108>)
 800024a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800024c:	4a39      	ldr	r2, [pc, #228]	@ (8000334 <UART_Init+0x108>)
 800024e:	f043 0310 	orr.w	r3, r3, #16
 8000252:	6453      	str	r3, [r2, #68]	@ 0x44

	//SET ALT FUNCTION FOR PB6->TX AND PB7-RX
	GPIOB->MODER |= (1U << 13);
 8000254:	4b38      	ldr	r3, [pc, #224]	@ (8000338 <UART_Init+0x10c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a37      	ldr	r2, [pc, #220]	@ (8000338 <UART_Init+0x10c>)
 800025a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800025e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1U << 12);
 8000260:	4b35      	ldr	r3, [pc, #212]	@ (8000338 <UART_Init+0x10c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a34      	ldr	r2, [pc, #208]	@ (8000338 <UART_Init+0x10c>)
 8000266:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800026a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U << 15);
 800026c:	4b32      	ldr	r3, [pc, #200]	@ (8000338 <UART_Init+0x10c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a31      	ldr	r2, [pc, #196]	@ (8000338 <UART_Init+0x10c>)
 8000272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000276:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1U << 14);
 8000278:	4b2f      	ldr	r3, [pc, #188]	@ (8000338 <UART_Init+0x10c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a2e      	ldr	r2, [pc, #184]	@ (8000338 <UART_Init+0x10c>)
 800027e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000282:	6013      	str	r3, [r2, #0]

	//SET PA5 IS OUTPUT CONNECTED TO RELAY
	GPIOA->MODER |= (1U << 10);
 8000284:	4b2d      	ldr	r3, [pc, #180]	@ (800033c <UART_Init+0x110>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a2c      	ldr	r2, [pc, #176]	@ (800033c <UART_Init+0x110>)
 800028a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800028e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 11);
 8000290:	4b2a      	ldr	r3, [pc, #168]	@ (800033c <UART_Init+0x110>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a29      	ldr	r2, [pc, #164]	@ (800033c <UART_Init+0x110>)
 8000296:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800029a:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] |= (1U << 24);
 800029c:	4b26      	ldr	r3, [pc, #152]	@ (8000338 <UART_Init+0x10c>)
 800029e:	6a1b      	ldr	r3, [r3, #32]
 80002a0:	4a25      	ldr	r2, [pc, #148]	@ (8000338 <UART_Init+0x10c>)
 80002a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002a6:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U << 25);
 80002a8:	4b23      	ldr	r3, [pc, #140]	@ (8000338 <UART_Init+0x10c>)
 80002aa:	6a1b      	ldr	r3, [r3, #32]
 80002ac:	4a22      	ldr	r2, [pc, #136]	@ (8000338 <UART_Init+0x10c>)
 80002ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002b2:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U << 26);
 80002b4:	4b20      	ldr	r3, [pc, #128]	@ (8000338 <UART_Init+0x10c>)
 80002b6:	6a1b      	ldr	r3, [r3, #32]
 80002b8:	4a1f      	ldr	r2, [pc, #124]	@ (8000338 <UART_Init+0x10c>)
 80002ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80002be:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U << 27);
 80002c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000338 <UART_Init+0x10c>)
 80002c2:	6a1b      	ldr	r3, [r3, #32]
 80002c4:	4a1c      	ldr	r2, [pc, #112]	@ (8000338 <UART_Init+0x10c>)
 80002c6:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80002ca:	6213      	str	r3, [r2, #32]

	GPIOB->AFR[0] |= (1U << 28);
 80002cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000338 <UART_Init+0x10c>)
 80002ce:	6a1b      	ldr	r3, [r3, #32]
 80002d0:	4a19      	ldr	r2, [pc, #100]	@ (8000338 <UART_Init+0x10c>)
 80002d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002d6:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U << 29);
 80002d8:	4b17      	ldr	r3, [pc, #92]	@ (8000338 <UART_Init+0x10c>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a16      	ldr	r2, [pc, #88]	@ (8000338 <UART_Init+0x10c>)
 80002de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80002e2:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U << 30);
 80002e4:	4b14      	ldr	r3, [pc, #80]	@ (8000338 <UART_Init+0x10c>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	4a13      	ldr	r2, [pc, #76]	@ (8000338 <UART_Init+0x10c>)
 80002ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002ee:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U << 31);
 80002f0:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <UART_Init+0x10c>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a10      	ldr	r2, [pc, #64]	@ (8000338 <UART_Init+0x10c>)
 80002f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80002fa:	6213      	str	r3, [r2, #32]

	USART1->CR1 |= (1U << 13);
 80002fc:	4b10      	ldr	r3, [pc, #64]	@ (8000340 <UART_Init+0x114>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	4a0f      	ldr	r2, [pc, #60]	@ (8000340 <UART_Init+0x114>)
 8000302:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000306:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= (1U << 2);
 8000308:	4b0d      	ldr	r3, [pc, #52]	@ (8000340 <UART_Init+0x114>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	4a0c      	ldr	r2, [pc, #48]	@ (8000340 <UART_Init+0x114>)
 800030e:	f043 0304 	orr.w	r3, r3, #4
 8000312:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= (1U << 3);
 8000314:	4b0a      	ldr	r3, [pc, #40]	@ (8000340 <UART_Init+0x114>)
 8000316:	68db      	ldr	r3, [r3, #12]
 8000318:	4a09      	ldr	r2, [pc, #36]	@ (8000340 <UART_Init+0x114>)
 800031a:	f043 0308 	orr.w	r3, r3, #8
 800031e:	60d3      	str	r3, [r2, #12]

	USART1->BRR = 0X0683; //9600 BAUD RATE
 8000320:	4b07      	ldr	r3, [pc, #28]	@ (8000340 <UART_Init+0x114>)
 8000322:	f240 6283 	movw	r2, #1667	@ 0x683
 8000326:	609a      	str	r2, [r3, #8]
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	40023800 	.word	0x40023800
 8000338:	40020400 	.word	0x40020400
 800033c:	40020000 	.word	0x40020000
 8000340:	40011000 	.word	0x40011000

08000344 <main>:

int main(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
	char Data;
	UART_Init();
 800034a:	f7ff ff6f 	bl	800022c <UART_Init>
	while (1) {
		Data = UART_Read();
 800034e:	f7ff ff41 	bl	80001d4 <UART_Read>
 8000352:	4603      	mov	r3, r0
 8000354:	71fb      	strb	r3, [r7, #7]
		if (Data == 'A') {
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	2b41      	cmp	r3, #65	@ 0x41
 800035a:	d10a      	bne.n	8000372 <main+0x2e>
			GPIOA->ODR &= ~(1U << 5);
 800035c:	4b0a      	ldr	r3, [pc, #40]	@ (8000388 <main+0x44>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	4a09      	ldr	r2, [pc, #36]	@ (8000388 <main+0x44>)
 8000362:	f023 0320 	bic.w	r3, r3, #32
 8000366:	6153      	str	r3, [r2, #20]
			UART_Write(Data);
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	4618      	mov	r0, r3
 800036c:	f7ff ff46 	bl	80001fc <UART_Write>
 8000370:	e7ed      	b.n	800034e <main+0xa>
		} else {
			GPIOA->ODR |= (1U << 5);
 8000372:	4b05      	ldr	r3, [pc, #20]	@ (8000388 <main+0x44>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	@ (8000388 <main+0x44>)
 8000378:	f043 0320 	orr.w	r3, r3, #32
 800037c:	6153      	str	r3, [r2, #20]
			UART_Write(Data);
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff ff3b 	bl	80001fc <UART_Write>
		Data = UART_Read();
 8000386:	e7e2      	b.n	800034e <main+0xa>
 8000388:	40020000 	.word	0x40020000

0800038c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800038c:	480d      	ldr	r0, [pc, #52]	@ (80003c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000390:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000394:	480c      	ldr	r0, [pc, #48]	@ (80003c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000396:	490d      	ldr	r1, [pc, #52]	@ (80003cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000398:	4a0d      	ldr	r2, [pc, #52]	@ (80003d0 <LoopForever+0xe>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800039c:	e002      	b.n	80003a4 <LoopCopyDataInit>

0800039e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a2:	3304      	adds	r3, #4

080003a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a8:	d3f9      	bcc.n	800039e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003aa:	4a0a      	ldr	r2, [pc, #40]	@ (80003d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003ac:	4c0a      	ldr	r4, [pc, #40]	@ (80003d8 <LoopForever+0x16>)
  movs r3, #0
 80003ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b0:	e001      	b.n	80003b6 <LoopFillZerobss>

080003b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b4:	3204      	adds	r2, #4

080003b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b8:	d3fb      	bcc.n	80003b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ba:	f000 f811 	bl	80003e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003be:	f7ff ffc1 	bl	8000344 <main>

080003c2 <LoopForever>:

LoopForever:
  b LoopForever
 80003c2:	e7fe      	b.n	80003c2 <LoopForever>
  ldr   r0, =_estack
 80003c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003d0:	08000448 	.word	0x08000448
  ldr r2, =_sbss
 80003d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d8:	2000001c 	.word	0x2000001c

080003dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003dc:	e7fe      	b.n	80003dc <ADC_IRQHandler>
	...

080003e0 <__libc_init_array>:
 80003e0:	b570      	push	{r4, r5, r6, lr}
 80003e2:	4d0d      	ldr	r5, [pc, #52]	@ (8000418 <__libc_init_array+0x38>)
 80003e4:	4c0d      	ldr	r4, [pc, #52]	@ (800041c <__libc_init_array+0x3c>)
 80003e6:	1b64      	subs	r4, r4, r5
 80003e8:	10a4      	asrs	r4, r4, #2
 80003ea:	2600      	movs	r6, #0
 80003ec:	42a6      	cmp	r6, r4
 80003ee:	d109      	bne.n	8000404 <__libc_init_array+0x24>
 80003f0:	4d0b      	ldr	r5, [pc, #44]	@ (8000420 <__libc_init_array+0x40>)
 80003f2:	4c0c      	ldr	r4, [pc, #48]	@ (8000424 <__libc_init_array+0x44>)
 80003f4:	f000 f818 	bl	8000428 <_init>
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	10a4      	asrs	r4, r4, #2
 80003fc:	2600      	movs	r6, #0
 80003fe:	42a6      	cmp	r6, r4
 8000400:	d105      	bne.n	800040e <__libc_init_array+0x2e>
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f855 3b04 	ldr.w	r3, [r5], #4
 8000408:	4798      	blx	r3
 800040a:	3601      	adds	r6, #1
 800040c:	e7ee      	b.n	80003ec <__libc_init_array+0xc>
 800040e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000412:	4798      	blx	r3
 8000414:	3601      	adds	r6, #1
 8000416:	e7f2      	b.n	80003fe <__libc_init_array+0x1e>
 8000418:	08000440 	.word	0x08000440
 800041c:	08000440 	.word	0x08000440
 8000420:	08000440 	.word	0x08000440
 8000424:	08000444 	.word	0x08000444

08000428 <_init>:
 8000428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042a:	bf00      	nop
 800042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042e:	bc08      	pop	{r3}
 8000430:	469e      	mov	lr, r3
 8000432:	4770      	bx	lr

08000434 <_fini>:
 8000434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000436:	bf00      	nop
 8000438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043a:	bc08      	pop	{r3}
 800043c:	469e      	mov	lr, r3
 800043e:	4770      	bx	lr
