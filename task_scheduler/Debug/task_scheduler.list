
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000eec  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08001080  08001080  00002080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010e8  080010e8  00003060  2**0
                  CONTENTS
  4 .ARM          00000000  080010e8  080010e8  00003060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010e8  080010e8  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010e8  080010e8  000020e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080010ec  080010ec  000020ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080010f0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000060  08001150  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08001150  0000321c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b84  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003ea  00000000  00000000  00003c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a0  00000000  00000000  00004000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000125  00000000  00000000  000041a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002bf6  00000000  00000000  000042c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000016be  00000000  00000000  00006ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009ba4  00000000  00000000  00008579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001211d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bbc  00000000  00000000  00012160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00012d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000060 	.word	0x20000060
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001068 	.word	0x08001068

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000064 	.word	0x20000064
 80001d0:	08001068 	.word	0x08001068

080001d4 <main>:
} TCB_t;

/* Each task has its own TCB */
TCB_t user_tasks[MAX_TASKS];

int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

	enable_processor_faults();
 80001d8:	f000 f900 	bl	80003dc <enable_processor_faults>
	init_scheduler_stack(SCHED_STACK_START);
 80001dc:	4807      	ldr	r0, [pc, #28]	@ (80001fc <main+0x28>)
 80001de:	f000 f869 	bl	80002b4 <init_scheduler_stack>
	init_tasks_stack();
 80001e2:	f000 f86d 	bl	80002c0 <init_tasks_stack>
	init_systick_timer(TICK_HZ);
 80001e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001ea:	f000 f82d 	bl	8000248 <init_systick_timer>
	switch_sp_to_psp();
 80001ee:	f000 f95b 	bl	80004a8 <switch_sp_to_psp>
	Task1_Handler();
 80001f2:	f000 f809 	bl	8000208 <Task1_Handler>
	for (;;)
 80001f6:	bf00      	nop
 80001f8:	e7fd      	b.n	80001f6 <main+0x22>
 80001fa:	bf00      	nop
 80001fc:	2001ec00 	.word	0x2001ec00

08000200 <idle_task>:
		;
}

void idle_task(void) {
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	while (1)
 8000204:	bf00      	nop
 8000206:	e7fd      	b.n	8000204 <idle_task+0x4>

08000208 <Task1_Handler>:
		;
}

void Task1_Handler(void) {
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	while (1) {
		printf(" Task1 \n");
 800020c:	4801      	ldr	r0, [pc, #4]	@ (8000214 <Task1_Handler+0xc>)
 800020e:	f000 fb97 	bl	8000940 <puts>
 8000212:	e7fb      	b.n	800020c <Task1_Handler+0x4>
 8000214:	08001080 	.word	0x08001080

08000218 <Task2_Handler>:
	}
}

void Task2_Handler(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	while (1) {
		printf(" Task2 \n");
 800021c:	4801      	ldr	r0, [pc, #4]	@ (8000224 <Task2_Handler+0xc>)
 800021e:	f000 fb8f 	bl	8000940 <puts>
 8000222:	e7fb      	b.n	800021c <Task2_Handler+0x4>
 8000224:	08001088 	.word	0x08001088

08000228 <Task3_Handler>:
	}
}

void Task3_Handler(void) {
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	while (1) {
		printf(" Task3 \n");
 800022c:	4801      	ldr	r0, [pc, #4]	@ (8000234 <Task3_Handler+0xc>)
 800022e:	f000 fb87 	bl	8000940 <puts>
 8000232:	e7fb      	b.n	800022c <Task3_Handler+0x4>
 8000234:	08001090 	.word	0x08001090

08000238 <Task4_Handler>:
	}
}

void Task4_Handler(void) {
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	while (1) {
		printf(" Task4 \n");
 800023c:	4801      	ldr	r0, [pc, #4]	@ (8000244 <Task4_Handler+0xc>)
 800023e:	f000 fb7f 	bl	8000940 <puts>
 8000242:	e7fb      	b.n	800023c <Task4_Handler+0x4>
 8000244:	08001098 	.word	0x08001098

08000248 <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz) {
 8000248:	b480      	push	{r7}
 800024a:	b087      	sub	sp, #28
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*) 0xE000E014;
 8000250:	4b15      	ldr	r3, [pc, #84]	@ (80002a8 <init_systick_timer+0x60>)
 8000252:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*) 0xE000E010;
 8000254:	4b15      	ldr	r3, [pc, #84]	@ (80002ac <init_systick_timer+0x64>)
 8000256:	613b      	str	r3, [r7, #16]
	/* calculation of reload value */
	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;
 8000258:	4a15      	ldr	r2, [pc, #84]	@ (80002b0 <init_systick_timer+0x68>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000260:	3b01      	subs	r3, #1
 8000262:	60fb      	str	r3, [r7, #12]

	//Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFFFF);
 8000264:	697b      	ldr	r3, [r7, #20]
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
	//load the value in to SVR
	*pSRVR |= count_value;
 800026a:	697b      	ldr	r3, [r7, #20]
 800026c:	681a      	ldr	r2, [r3, #0]
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	431a      	orrs	r2, r3
 8000272:	697b      	ldr	r3, [r7, #20]
 8000274:	601a      	str	r2, [r3, #0]
	//do some settings
	*pSCSR |= (1 << 1); //Enables SysTick exception request:
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f043 0202 	orr.w	r2, r3, #2
 800027e:	693b      	ldr	r3, [r7, #16]
 8000280:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2);  //Indicates the clock source, processor clock source
 8000282:	693b      	ldr	r3, [r7, #16]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f043 0204 	orr.w	r2, r3, #4
 800028a:	693b      	ldr	r3, [r7, #16]
 800028c:	601a      	str	r2, [r3, #0]
	//enable the systick
	*pSCSR |= (1 << 0); //enables the counter
 800028e:	693b      	ldr	r3, [r7, #16]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f043 0201 	orr.w	r2, r3, #1
 8000296:	693b      	ldr	r3, [r7, #16]
 8000298:	601a      	str	r2, [r3, #0]
}
 800029a:	bf00      	nop
 800029c:	371c      	adds	r7, #28
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e014 	.word	0xe000e014
 80002ac:	e000e010 	.word	0xe000e010
 80002b0:	00f42400 	.word	0x00f42400

080002b4 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack) {
 80002b4:	4603      	mov	r3, r0
	__asm volatile("MSR MSP,%0": : "r" (sched_top_of_stack) : );
 80002b6:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 80002ba:	4770      	bx	lr
}
 80002bc:	bf00      	nop
	...

080002c0 <init_tasks_stack>:

/* this function stores dummy stack contents for each task */

void init_tasks_stack(void) {
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
	user_tasks[0].current_state = TASK_READY_STATE;
 80002c6:	4b3a      	ldr	r3, [pc, #232]	@ (80003b0 <init_tasks_stack+0xf0>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 80002cc:	4b38      	ldr	r3, [pc, #224]	@ (80003b0 <init_tasks_stack+0xf0>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 80002d2:	4b37      	ldr	r3, [pc, #220]	@ (80003b0 <init_tasks_stack+0xf0>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 80002da:	4b35      	ldr	r3, [pc, #212]	@ (80003b0 <init_tasks_stack+0xf0>)
 80002dc:	2200      	movs	r2, #0
 80002de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 80002e2:	4b33      	ldr	r3, [pc, #204]	@ (80003b0 <init_tasks_stack+0xf0>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 80002ea:	4b31      	ldr	r3, [pc, #196]	@ (80003b0 <init_tasks_stack+0xf0>)
 80002ec:	4a31      	ldr	r2, [pc, #196]	@ (80003b4 <init_tasks_stack+0xf4>)
 80002ee:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 80002f0:	4b2f      	ldr	r3, [pc, #188]	@ (80003b0 <init_tasks_stack+0xf0>)
 80002f2:	4a31      	ldr	r2, [pc, #196]	@ (80003b8 <init_tasks_stack+0xf8>)
 80002f4:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 80002f6:	4b2e      	ldr	r3, [pc, #184]	@ (80003b0 <init_tasks_stack+0xf0>)
 80002f8:	4a30      	ldr	r2, [pc, #192]	@ (80003bc <init_tasks_stack+0xfc>)
 80002fa:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 80002fc:	4b2c      	ldr	r3, [pc, #176]	@ (80003b0 <init_tasks_stack+0xf0>)
 80002fe:	4a30      	ldr	r2, [pc, #192]	@ (80003c0 <init_tasks_stack+0x100>)
 8000300:	631a      	str	r2, [r3, #48]	@ 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 8000302:	4b2b      	ldr	r3, [pc, #172]	@ (80003b0 <init_tasks_stack+0xf0>)
 8000304:	4a2f      	ldr	r2, [pc, #188]	@ (80003c4 <init_tasks_stack+0x104>)
 8000306:	641a      	str	r2, [r3, #64]	@ 0x40

	user_tasks[0].task_handler = idle_task;
 8000308:	4b29      	ldr	r3, [pc, #164]	@ (80003b0 <init_tasks_stack+0xf0>)
 800030a:	4a2f      	ldr	r2, [pc, #188]	@ (80003c8 <init_tasks_stack+0x108>)
 800030c:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = Task1_Handler;
 800030e:	4b28      	ldr	r3, [pc, #160]	@ (80003b0 <init_tasks_stack+0xf0>)
 8000310:	4a2e      	ldr	r2, [pc, #184]	@ (80003cc <init_tasks_stack+0x10c>)
 8000312:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = Task2_Handler;
 8000314:	4b26      	ldr	r3, [pc, #152]	@ (80003b0 <init_tasks_stack+0xf0>)
 8000316:	4a2e      	ldr	r2, [pc, #184]	@ (80003d0 <init_tasks_stack+0x110>)
 8000318:	62da      	str	r2, [r3, #44]	@ 0x2c
	user_tasks[3].task_handler = Task3_Handler;
 800031a:	4b25      	ldr	r3, [pc, #148]	@ (80003b0 <init_tasks_stack+0xf0>)
 800031c:	4a2d      	ldr	r2, [pc, #180]	@ (80003d4 <init_tasks_stack+0x114>)
 800031e:	63da      	str	r2, [r3, #60]	@ 0x3c
	user_tasks[4].task_handler = Task4_Handler;
 8000320:	4b23      	ldr	r3, [pc, #140]	@ (80003b0 <init_tasks_stack+0xf0>)
 8000322:	4a2d      	ldr	r2, [pc, #180]	@ (80003d8 <init_tasks_stack+0x118>)
 8000324:	64da      	str	r2, [r3, #76]	@ 0x4c

	uint32_t *pPSP;

	for (int i = 0; i < MAX_TASKS; i++) {
 8000326:	2300      	movs	r3, #0
 8000328:	60bb      	str	r3, [r7, #8]
 800032a:	e037      	b.n	800039c <init_tasks_stack+0xdc>
		pPSP = (uint32_t*) user_tasks[i].psp_value;
 800032c:	4a20      	ldr	r2, [pc, #128]	@ (80003b0 <init_tasks_stack+0xf0>)
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	011b      	lsls	r3, r3, #4
 8000332:	4413      	add	r3, r2
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	60fb      	str	r3, [r7, #12]

		pPSP--;
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	3b04      	subs	r3, #4
 800033c:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; //0x01000000
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000344:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	3b04      	subs	r3, #4
 800034a:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;
 800034c:	4a18      	ldr	r2, [pc, #96]	@ (80003b0 <init_tasks_stack+0xf0>)
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	011b      	lsls	r3, r3, #4
 8000352:	4413      	add	r3, r2
 8000354:	330c      	adds	r3, #12
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	461a      	mov	r2, r3
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	3b04      	subs	r3, #4
 8000362:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	f06f 0202 	mvn.w	r2, #2
 800036a:	601a      	str	r2, [r3, #0]

		for (int j = 0; j < 13; j++) {
 800036c:	2300      	movs	r3, #0
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	e008      	b.n	8000384 <init_tasks_stack+0xc4>
			pPSP--;
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	3b04      	subs	r3, #4
 8000376:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 13; j++) {
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	3301      	adds	r3, #1
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	2b0c      	cmp	r3, #12
 8000388:	ddf3      	ble.n	8000372 <init_tasks_stack+0xb2>
		}

		user_tasks[i].psp_value = (uint32_t) pPSP;
 800038a:	68fa      	ldr	r2, [r7, #12]
 800038c:	4908      	ldr	r1, [pc, #32]	@ (80003b0 <init_tasks_stack+0xf0>)
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	011b      	lsls	r3, r3, #4
 8000392:	440b      	add	r3, r1
 8000394:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_TASKS; i++) {
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	3301      	adds	r3, #1
 800039a:	60bb      	str	r3, [r7, #8]
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	2b04      	cmp	r3, #4
 80003a0:	ddc4      	ble.n	800032c <init_tasks_stack+0x6c>
	}
}
 80003a2:	bf00      	nop
 80003a4:	bf00      	nop
 80003a6:	3714      	adds	r7, #20
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	2000007c 	.word	0x2000007c
 80003b4:	2001f000 	.word	0x2001f000
 80003b8:	20020000 	.word	0x20020000
 80003bc:	2001fc00 	.word	0x2001fc00
 80003c0:	2001f800 	.word	0x2001f800
 80003c4:	2001f400 	.word	0x2001f400
 80003c8:	08000201 	.word	0x08000201
 80003cc:	08000209 	.word	0x08000209
 80003d0:	08000219 	.word	0x08000219
 80003d4:	08000229 	.word	0x08000229
 80003d8:	08000239 	.word	0x08000239

080003dc <enable_processor_faults>:

void enable_processor_faults(void) {
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*) 0xE000ED24;
 80003e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000418 <enable_processor_faults+0x3c>)
 80003e4:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1 << 16); //mem manage
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17); //bus fault
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18); //usage fault
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	601a      	str	r2, [r3, #0]
}
 800040a:	bf00      	nop
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	e000ed24 	.word	0xe000ed24

0800041c <get_psp_value>:

uint32_t get_psp_value(void) {
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 8000420:	4b05      	ldr	r3, [pc, #20]	@ (8000438 <get_psp_value+0x1c>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	4a05      	ldr	r2, [pc, #20]	@ (800043c <get_psp_value+0x20>)
 8000426:	011b      	lsls	r3, r3, #4
 8000428:	4413      	add	r3, r2
 800042a:	681b      	ldr	r3, [r3, #0]
}
 800042c:	4618      	mov	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	20000000 	.word	0x20000000
 800043c:	2000007c 	.word	0x2000007c

08000440 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value) {
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 8000448:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <save_psp_value+0x24>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	4a06      	ldr	r2, [pc, #24]	@ (8000468 <save_psp_value+0x28>)
 800044e:	011b      	lsls	r3, r3, #4
 8000450:	4413      	add	r3, r2
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	601a      	str	r2, [r3, #0]
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	20000000 	.word	0x20000000
 8000468:	2000007c 	.word	0x2000007c

0800046c <update_next_task>:

void update_next_task(void) {
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
	current_task++;
 8000470:	4b0b      	ldr	r3, [pc, #44]	@ (80004a0 <update_next_task+0x34>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	3301      	adds	r3, #1
 8000476:	b2da      	uxtb	r2, r3
 8000478:	4b09      	ldr	r3, [pc, #36]	@ (80004a0 <update_next_task+0x34>)
 800047a:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS; //SET ROUND ROBIN
 800047c:	4b08      	ldr	r3, [pc, #32]	@ (80004a0 <update_next_task+0x34>)
 800047e:	781a      	ldrb	r2, [r3, #0]
 8000480:	4b08      	ldr	r3, [pc, #32]	@ (80004a4 <update_next_task+0x38>)
 8000482:	fba3 1302 	umull	r1, r3, r3, r2
 8000486:	0899      	lsrs	r1, r3, #2
 8000488:	460b      	mov	r3, r1
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	440b      	add	r3, r1
 800048e:	1ad3      	subs	r3, r2, r3
 8000490:	b2da      	uxtb	r2, r3
 8000492:	4b03      	ldr	r3, [pc, #12]	@ (80004a0 <update_next_task+0x34>)
 8000494:	701a      	strb	r2, [r3, #0]
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	20000000 	.word	0x20000000
 80004a4:	cccccccd 	.word	0xcccccccd

080004a8 <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void) {

	//1. initialize the PSP with TASK1 stack start address
	//get the value of psp of current_task
	//Preserve LR which connects back to main() using PUSH
	__asm volatile ("PUSH {LR}");
 80004a8:	b500      	push	{lr}
	//Get the PSP Value of the Current Task
	__asm volatile ("BL get_psp_value");
 80004aa:	f7ff ffb7 	bl	800041c <get_psp_value>
	//Initialize PSP
	__asm volatile ("MSR PSP,R0");
 80004ae:	f380 8809 	msr	PSP, r0
	//Retrieve LR Value using POP
	__asm volatile ("POP {LR}");
 80004b2:	f85d eb04 	ldr.w	lr, [sp], #4
	//Change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0X02");
 80004b6:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 80004ba:	f380 8814 	msr	CONTROL, r0
	//Return to Main Function
	__asm volatile ("BX LR");
 80004be:	4770      	bx	lr
}
 80004c0:	bf00      	nop

080004c2 <SysTick_Handler>:

__attribute__((naked)) void SysTick_Handler(void) {

	//1. Get current running task's PSP value
	__asm volatile("MRS R0,PSP");
 80004c2:	f3ef 8009 	mrs	r0, PSP
	//2. Using that PSP value store SF2( R4 to R11)
	__asm volatile("STMDB R0!,{R4-R11}");
 80004c6:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//3.Save the LINK Register Using PUSH Operations
	__asm volatile("PUSH {LR}");
 80004ca:	b500      	push	{lr}
	//4. Save the current value of PSP
	__asm volatile("BL save_psp_value");
 80004cc:	f7ff ffb8 	bl	8000440 <save_psp_value>
	//5. Decide next task to run
	__asm volatile("BL update_next_task");
 80004d0:	f7ff ffcc 	bl	800046c <update_next_task>
	//6. get its past PSP value
	__asm volatile ("BL get_psp_value");
 80004d4:	f7ff ffa2 	bl	800041c <get_psp_value>
	//7. Using that PSP value retrieve SF2(R4 to R11)
	__asm volatile ("LDMIA R0!,{R4-R11}");
 80004d8:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//8. update PSP
	__asm volatile("MSR PSP,R0");
 80004dc:	f380 8809 	msr	PSP, r0
	//9.Retrieve the LINK Register Using POP Operations
	__asm volatile("POP {LR}");
 80004e0:	f85d eb04 	ldr.w	lr, [sp], #4
	//Update PSP and exit
	__asm volatile("BX LR");
 80004e4:	4770      	bx	lr

}
 80004e6:	bf00      	nop

080004e8 <HardFault_Handler>:

//2. implement the fault handlers
void HardFault_Handler(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 80004ec:	4802      	ldr	r0, [pc, #8]	@ (80004f8 <HardFault_Handler+0x10>)
 80004ee:	f000 fa27 	bl	8000940 <puts>
	while (1);
 80004f2:	bf00      	nop
 80004f4:	e7fd      	b.n	80004f2 <HardFault_Handler+0xa>
 80004f6:	bf00      	nop
 80004f8:	080010a0 	.word	0x080010a0

080004fc <MemManage_Handler>:
}

void MemManage_Handler(void) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 8000500:	4802      	ldr	r0, [pc, #8]	@ (800050c <MemManage_Handler+0x10>)
 8000502:	f000 fa1d 	bl	8000940 <puts>
	while (1);
 8000506:	bf00      	nop
 8000508:	e7fd      	b.n	8000506 <MemManage_Handler+0xa>
 800050a:	bf00      	nop
 800050c:	080010b8 	.word	0x080010b8

08000510 <BusFault_Handler>:
}

void BusFault_Handler(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 8000514:	4802      	ldr	r0, [pc, #8]	@ (8000520 <BusFault_Handler+0x10>)
 8000516:	f000 fa13 	bl	8000940 <puts>
	while (1);
 800051a:	bf00      	nop
 800051c:	e7fd      	b.n	800051a <BusFault_Handler+0xa>
 800051e:	bf00      	nop
 8000520:	080010d0 	.word	0x080010d0

08000524 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800052e:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <ITM_SendChar+0x48>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a0e      	ldr	r2, [pc, #56]	@ (800056c <ITM_SendChar+0x48>)
 8000534:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000538:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800053a:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <ITM_SendChar+0x4c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a0c      	ldr	r2, [pc, #48]	@ (8000570 <ITM_SendChar+0x4c>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000546:	bf00      	nop
 8000548:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	2b00      	cmp	r3, #0
 8000554:	d0f8      	beq.n	8000548 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000556:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	6013      	str	r3, [r2, #0]
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000edfc 	.word	0xe000edfc
 8000570:	e0000e00 	.word	0xe0000e00

08000574 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
 8000584:	e00a      	b.n	800059c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000586:	f3af 8000 	nop.w
 800058a:	4601      	mov	r1, r0
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	1c5a      	adds	r2, r3, #1
 8000590:	60ba      	str	r2, [r7, #8]
 8000592:	b2ca      	uxtb	r2, r1
 8000594:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	3301      	adds	r3, #1
 800059a:	617b      	str	r3, [r7, #20]
 800059c:	697a      	ldr	r2, [r7, #20]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	dbf0      	blt.n	8000586 <_read+0x12>
  }

  return len;
 80005a4:	687b      	ldr	r3, [r7, #4]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3718      	adds	r7, #24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b086      	sub	sp, #24
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	60f8      	str	r0, [r7, #12]
 80005b6:	60b9      	str	r1, [r7, #8]
 80005b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	e009      	b.n	80005d4 <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	1c5a      	adds	r2, r3, #1
 80005c4:	60ba      	str	r2, [r7, #8]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ffab 	bl	8000524 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	3301      	adds	r3, #1
 80005d2:	617b      	str	r3, [r7, #20]
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	429a      	cmp	r2, r3
 80005da:	dbf1      	blt.n	80005c0 <_write+0x12>
  }
  return len;
 80005dc:	687b      	ldr	r3, [r7, #4]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <_close>:

int _close(int file)
{
 80005e6:	b480      	push	{r7}
 80005e8:	b083      	sub	sp, #12
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800060e:	605a      	str	r2, [r3, #4]
  return 0;
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <_isatty>:

int _isatty(int file)
{
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000626:	2301      	movs	r3, #1
}
 8000628:	4618      	mov	r0, r3
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
	...

08000650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000658:	4a14      	ldr	r2, [pc, #80]	@ (80006ac <_sbrk+0x5c>)
 800065a:	4b15      	ldr	r3, [pc, #84]	@ (80006b0 <_sbrk+0x60>)
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000664:	4b13      	ldr	r3, [pc, #76]	@ (80006b4 <_sbrk+0x64>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d102      	bne.n	8000672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800066c:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <_sbrk+0x64>)
 800066e:	4a12      	ldr	r2, [pc, #72]	@ (80006b8 <_sbrk+0x68>)
 8000670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000672:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <_sbrk+0x64>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	429a      	cmp	r2, r3
 800067e:	d207      	bcs.n	8000690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000680:	f000 fa8c 	bl	8000b9c <__errno>
 8000684:	4603      	mov	r3, r0
 8000686:	220c      	movs	r2, #12
 8000688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	e009      	b.n	80006a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000690:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <_sbrk+0x64>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000696:	4b07      	ldr	r3, [pc, #28]	@ (80006b4 <_sbrk+0x64>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	4a05      	ldr	r2, [pc, #20]	@ (80006b4 <_sbrk+0x64>)
 80006a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006a2:	68fb      	ldr	r3, [r7, #12]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20018000 	.word	0x20018000
 80006b0:	00000400 	.word	0x00000400
 80006b4:	200000cc 	.word	0x200000cc
 80006b8:	20000220 	.word	0x20000220

080006bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006bc:	480d      	ldr	r0, [pc, #52]	@ (80006f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c4:	480c      	ldr	r0, [pc, #48]	@ (80006f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006c6:	490d      	ldr	r1, [pc, #52]	@ (80006fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80006c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000700 <LoopForever+0xe>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006cc:	e002      	b.n	80006d4 <LoopCopyDataInit>

080006ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d2:	3304      	adds	r3, #4

080006d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d8:	d3f9      	bcc.n	80006ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006da:	4a0a      	ldr	r2, [pc, #40]	@ (8000704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000708 <LoopForever+0x16>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e0:	e001      	b.n	80006e6 <LoopFillZerobss>

080006e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e4:	3204      	adds	r2, #4

080006e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e8:	d3fb      	bcc.n	80006e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ea:	f000 fa5d 	bl	8000ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ee:	f7ff fd71 	bl	80001d4 <main>

080006f2 <LoopForever>:

LoopForever:
  b LoopForever
 80006f2:	e7fe      	b.n	80006f2 <LoopForever>
  ldr   r0, =_estack
 80006f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006fc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000700:	080010f0 	.word	0x080010f0
  ldr r2, =_sbss
 8000704:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000708:	2000021c 	.word	0x2000021c

0800070c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800070c:	e7fe      	b.n	800070c <ADC_IRQHandler>
	...

08000710 <std>:
 8000710:	2300      	movs	r3, #0
 8000712:	b510      	push	{r4, lr}
 8000714:	4604      	mov	r4, r0
 8000716:	e9c0 3300 	strd	r3, r3, [r0]
 800071a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800071e:	6083      	str	r3, [r0, #8]
 8000720:	8181      	strh	r1, [r0, #12]
 8000722:	6643      	str	r3, [r0, #100]	@ 0x64
 8000724:	81c2      	strh	r2, [r0, #14]
 8000726:	6183      	str	r3, [r0, #24]
 8000728:	4619      	mov	r1, r3
 800072a:	2208      	movs	r2, #8
 800072c:	305c      	adds	r0, #92	@ 0x5c
 800072e:	f000 f9e7 	bl	8000b00 <memset>
 8000732:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <std+0x58>)
 8000734:	6263      	str	r3, [r4, #36]	@ 0x24
 8000736:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <std+0x5c>)
 8000738:	62a3      	str	r3, [r4, #40]	@ 0x28
 800073a:	4b0d      	ldr	r3, [pc, #52]	@ (8000770 <std+0x60>)
 800073c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800073e:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <std+0x64>)
 8000740:	6323      	str	r3, [r4, #48]	@ 0x30
 8000742:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <std+0x68>)
 8000744:	6224      	str	r4, [r4, #32]
 8000746:	429c      	cmp	r4, r3
 8000748:	d006      	beq.n	8000758 <std+0x48>
 800074a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800074e:	4294      	cmp	r4, r2
 8000750:	d002      	beq.n	8000758 <std+0x48>
 8000752:	33d0      	adds	r3, #208	@ 0xd0
 8000754:	429c      	cmp	r4, r3
 8000756:	d105      	bne.n	8000764 <std+0x54>
 8000758:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800075c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000760:	f000 ba46 	b.w	8000bf0 <__retarget_lock_init_recursive>
 8000764:	bd10      	pop	{r4, pc}
 8000766:	bf00      	nop
 8000768:	08000951 	.word	0x08000951
 800076c:	08000973 	.word	0x08000973
 8000770:	080009ab 	.word	0x080009ab
 8000774:	080009cf 	.word	0x080009cf
 8000778:	200000d0 	.word	0x200000d0

0800077c <stdio_exit_handler>:
 800077c:	4a02      	ldr	r2, [pc, #8]	@ (8000788 <stdio_exit_handler+0xc>)
 800077e:	4903      	ldr	r1, [pc, #12]	@ (800078c <stdio_exit_handler+0x10>)
 8000780:	4803      	ldr	r0, [pc, #12]	@ (8000790 <stdio_exit_handler+0x14>)
 8000782:	f000 b869 	b.w	8000858 <_fwalk_sglue>
 8000786:	bf00      	nop
 8000788:	20000004 	.word	0x20000004
 800078c:	08000ef1 	.word	0x08000ef1
 8000790:	20000014 	.word	0x20000014

08000794 <cleanup_stdio>:
 8000794:	6841      	ldr	r1, [r0, #4]
 8000796:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <cleanup_stdio+0x34>)
 8000798:	4299      	cmp	r1, r3
 800079a:	b510      	push	{r4, lr}
 800079c:	4604      	mov	r4, r0
 800079e:	d001      	beq.n	80007a4 <cleanup_stdio+0x10>
 80007a0:	f000 fba6 	bl	8000ef0 <_fflush_r>
 80007a4:	68a1      	ldr	r1, [r4, #8]
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <cleanup_stdio+0x38>)
 80007a8:	4299      	cmp	r1, r3
 80007aa:	d002      	beq.n	80007b2 <cleanup_stdio+0x1e>
 80007ac:	4620      	mov	r0, r4
 80007ae:	f000 fb9f 	bl	8000ef0 <_fflush_r>
 80007b2:	68e1      	ldr	r1, [r4, #12]
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <cleanup_stdio+0x3c>)
 80007b6:	4299      	cmp	r1, r3
 80007b8:	d004      	beq.n	80007c4 <cleanup_stdio+0x30>
 80007ba:	4620      	mov	r0, r4
 80007bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007c0:	f000 bb96 	b.w	8000ef0 <_fflush_r>
 80007c4:	bd10      	pop	{r4, pc}
 80007c6:	bf00      	nop
 80007c8:	200000d0 	.word	0x200000d0
 80007cc:	20000138 	.word	0x20000138
 80007d0:	200001a0 	.word	0x200001a0

080007d4 <global_stdio_init.part.0>:
 80007d4:	b510      	push	{r4, lr}
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <global_stdio_init.part.0+0x30>)
 80007d8:	4c0b      	ldr	r4, [pc, #44]	@ (8000808 <global_stdio_init.part.0+0x34>)
 80007da:	4a0c      	ldr	r2, [pc, #48]	@ (800080c <global_stdio_init.part.0+0x38>)
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	4620      	mov	r0, r4
 80007e0:	2200      	movs	r2, #0
 80007e2:	2104      	movs	r1, #4
 80007e4:	f7ff ff94 	bl	8000710 <std>
 80007e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80007ec:	2201      	movs	r2, #1
 80007ee:	2109      	movs	r1, #9
 80007f0:	f7ff ff8e 	bl	8000710 <std>
 80007f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80007f8:	2202      	movs	r2, #2
 80007fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007fe:	2112      	movs	r1, #18
 8000800:	f7ff bf86 	b.w	8000710 <std>
 8000804:	20000208 	.word	0x20000208
 8000808:	200000d0 	.word	0x200000d0
 800080c:	0800077d 	.word	0x0800077d

08000810 <__sfp_lock_acquire>:
 8000810:	4801      	ldr	r0, [pc, #4]	@ (8000818 <__sfp_lock_acquire+0x8>)
 8000812:	f000 b9ee 	b.w	8000bf2 <__retarget_lock_acquire_recursive>
 8000816:	bf00      	nop
 8000818:	20000211 	.word	0x20000211

0800081c <__sfp_lock_release>:
 800081c:	4801      	ldr	r0, [pc, #4]	@ (8000824 <__sfp_lock_release+0x8>)
 800081e:	f000 b9e9 	b.w	8000bf4 <__retarget_lock_release_recursive>
 8000822:	bf00      	nop
 8000824:	20000211 	.word	0x20000211

08000828 <__sinit>:
 8000828:	b510      	push	{r4, lr}
 800082a:	4604      	mov	r4, r0
 800082c:	f7ff fff0 	bl	8000810 <__sfp_lock_acquire>
 8000830:	6a23      	ldr	r3, [r4, #32]
 8000832:	b11b      	cbz	r3, 800083c <__sinit+0x14>
 8000834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000838:	f7ff bff0 	b.w	800081c <__sfp_lock_release>
 800083c:	4b04      	ldr	r3, [pc, #16]	@ (8000850 <__sinit+0x28>)
 800083e:	6223      	str	r3, [r4, #32]
 8000840:	4b04      	ldr	r3, [pc, #16]	@ (8000854 <__sinit+0x2c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1f5      	bne.n	8000834 <__sinit+0xc>
 8000848:	f7ff ffc4 	bl	80007d4 <global_stdio_init.part.0>
 800084c:	e7f2      	b.n	8000834 <__sinit+0xc>
 800084e:	bf00      	nop
 8000850:	08000795 	.word	0x08000795
 8000854:	20000208 	.word	0x20000208

08000858 <_fwalk_sglue>:
 8000858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800085c:	4607      	mov	r7, r0
 800085e:	4688      	mov	r8, r1
 8000860:	4614      	mov	r4, r2
 8000862:	2600      	movs	r6, #0
 8000864:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000868:	f1b9 0901 	subs.w	r9, r9, #1
 800086c:	d505      	bpl.n	800087a <_fwalk_sglue+0x22>
 800086e:	6824      	ldr	r4, [r4, #0]
 8000870:	2c00      	cmp	r4, #0
 8000872:	d1f7      	bne.n	8000864 <_fwalk_sglue+0xc>
 8000874:	4630      	mov	r0, r6
 8000876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800087a:	89ab      	ldrh	r3, [r5, #12]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d907      	bls.n	8000890 <_fwalk_sglue+0x38>
 8000880:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000884:	3301      	adds	r3, #1
 8000886:	d003      	beq.n	8000890 <_fwalk_sglue+0x38>
 8000888:	4629      	mov	r1, r5
 800088a:	4638      	mov	r0, r7
 800088c:	47c0      	blx	r8
 800088e:	4306      	orrs	r6, r0
 8000890:	3568      	adds	r5, #104	@ 0x68
 8000892:	e7e9      	b.n	8000868 <_fwalk_sglue+0x10>

08000894 <_puts_r>:
 8000894:	6a03      	ldr	r3, [r0, #32]
 8000896:	b570      	push	{r4, r5, r6, lr}
 8000898:	6884      	ldr	r4, [r0, #8]
 800089a:	4605      	mov	r5, r0
 800089c:	460e      	mov	r6, r1
 800089e:	b90b      	cbnz	r3, 80008a4 <_puts_r+0x10>
 80008a0:	f7ff ffc2 	bl	8000828 <__sinit>
 80008a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80008a6:	07db      	lsls	r3, r3, #31
 80008a8:	d405      	bmi.n	80008b6 <_puts_r+0x22>
 80008aa:	89a3      	ldrh	r3, [r4, #12]
 80008ac:	0598      	lsls	r0, r3, #22
 80008ae:	d402      	bmi.n	80008b6 <_puts_r+0x22>
 80008b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80008b2:	f000 f99e 	bl	8000bf2 <__retarget_lock_acquire_recursive>
 80008b6:	89a3      	ldrh	r3, [r4, #12]
 80008b8:	0719      	lsls	r1, r3, #28
 80008ba:	d502      	bpl.n	80008c2 <_puts_r+0x2e>
 80008bc:	6923      	ldr	r3, [r4, #16]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d135      	bne.n	800092e <_puts_r+0x9a>
 80008c2:	4621      	mov	r1, r4
 80008c4:	4628      	mov	r0, r5
 80008c6:	f000 f8c5 	bl	8000a54 <__swsetup_r>
 80008ca:	b380      	cbz	r0, 800092e <_puts_r+0x9a>
 80008cc:	f04f 35ff 	mov.w	r5, #4294967295
 80008d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80008d2:	07da      	lsls	r2, r3, #31
 80008d4:	d405      	bmi.n	80008e2 <_puts_r+0x4e>
 80008d6:	89a3      	ldrh	r3, [r4, #12]
 80008d8:	059b      	lsls	r3, r3, #22
 80008da:	d402      	bmi.n	80008e2 <_puts_r+0x4e>
 80008dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80008de:	f000 f989 	bl	8000bf4 <__retarget_lock_release_recursive>
 80008e2:	4628      	mov	r0, r5
 80008e4:	bd70      	pop	{r4, r5, r6, pc}
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	da04      	bge.n	80008f4 <_puts_r+0x60>
 80008ea:	69a2      	ldr	r2, [r4, #24]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	dc17      	bgt.n	8000920 <_puts_r+0x8c>
 80008f0:	290a      	cmp	r1, #10
 80008f2:	d015      	beq.n	8000920 <_puts_r+0x8c>
 80008f4:	6823      	ldr	r3, [r4, #0]
 80008f6:	1c5a      	adds	r2, r3, #1
 80008f8:	6022      	str	r2, [r4, #0]
 80008fa:	7019      	strb	r1, [r3, #0]
 80008fc:	68a3      	ldr	r3, [r4, #8]
 80008fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000902:	3b01      	subs	r3, #1
 8000904:	60a3      	str	r3, [r4, #8]
 8000906:	2900      	cmp	r1, #0
 8000908:	d1ed      	bne.n	80008e6 <_puts_r+0x52>
 800090a:	2b00      	cmp	r3, #0
 800090c:	da11      	bge.n	8000932 <_puts_r+0x9e>
 800090e:	4622      	mov	r2, r4
 8000910:	210a      	movs	r1, #10
 8000912:	4628      	mov	r0, r5
 8000914:	f000 f85f 	bl	80009d6 <__swbuf_r>
 8000918:	3001      	adds	r0, #1
 800091a:	d0d7      	beq.n	80008cc <_puts_r+0x38>
 800091c:	250a      	movs	r5, #10
 800091e:	e7d7      	b.n	80008d0 <_puts_r+0x3c>
 8000920:	4622      	mov	r2, r4
 8000922:	4628      	mov	r0, r5
 8000924:	f000 f857 	bl	80009d6 <__swbuf_r>
 8000928:	3001      	adds	r0, #1
 800092a:	d1e7      	bne.n	80008fc <_puts_r+0x68>
 800092c:	e7ce      	b.n	80008cc <_puts_r+0x38>
 800092e:	3e01      	subs	r6, #1
 8000930:	e7e4      	b.n	80008fc <_puts_r+0x68>
 8000932:	6823      	ldr	r3, [r4, #0]
 8000934:	1c5a      	adds	r2, r3, #1
 8000936:	6022      	str	r2, [r4, #0]
 8000938:	220a      	movs	r2, #10
 800093a:	701a      	strb	r2, [r3, #0]
 800093c:	e7ee      	b.n	800091c <_puts_r+0x88>
	...

08000940 <puts>:
 8000940:	4b02      	ldr	r3, [pc, #8]	@ (800094c <puts+0xc>)
 8000942:	4601      	mov	r1, r0
 8000944:	6818      	ldr	r0, [r3, #0]
 8000946:	f7ff bfa5 	b.w	8000894 <_puts_r>
 800094a:	bf00      	nop
 800094c:	20000010 	.word	0x20000010

08000950 <__sread>:
 8000950:	b510      	push	{r4, lr}
 8000952:	460c      	mov	r4, r1
 8000954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000958:	f000 f8fc 	bl	8000b54 <_read_r>
 800095c:	2800      	cmp	r0, #0
 800095e:	bfab      	itete	ge
 8000960:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000962:	89a3      	ldrhlt	r3, [r4, #12]
 8000964:	181b      	addge	r3, r3, r0
 8000966:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800096a:	bfac      	ite	ge
 800096c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800096e:	81a3      	strhlt	r3, [r4, #12]
 8000970:	bd10      	pop	{r4, pc}

08000972 <__swrite>:
 8000972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000976:	461f      	mov	r7, r3
 8000978:	898b      	ldrh	r3, [r1, #12]
 800097a:	05db      	lsls	r3, r3, #23
 800097c:	4605      	mov	r5, r0
 800097e:	460c      	mov	r4, r1
 8000980:	4616      	mov	r6, r2
 8000982:	d505      	bpl.n	8000990 <__swrite+0x1e>
 8000984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000988:	2302      	movs	r3, #2
 800098a:	2200      	movs	r2, #0
 800098c:	f000 f8d0 	bl	8000b30 <_lseek_r>
 8000990:	89a3      	ldrh	r3, [r4, #12]
 8000992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000996:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800099a:	81a3      	strh	r3, [r4, #12]
 800099c:	4632      	mov	r2, r6
 800099e:	463b      	mov	r3, r7
 80009a0:	4628      	mov	r0, r5
 80009a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80009a6:	f000 b8e7 	b.w	8000b78 <_write_r>

080009aa <__sseek>:
 80009aa:	b510      	push	{r4, lr}
 80009ac:	460c      	mov	r4, r1
 80009ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009b2:	f000 f8bd 	bl	8000b30 <_lseek_r>
 80009b6:	1c43      	adds	r3, r0, #1
 80009b8:	89a3      	ldrh	r3, [r4, #12]
 80009ba:	bf15      	itete	ne
 80009bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80009be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80009c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80009c6:	81a3      	strheq	r3, [r4, #12]
 80009c8:	bf18      	it	ne
 80009ca:	81a3      	strhne	r3, [r4, #12]
 80009cc:	bd10      	pop	{r4, pc}

080009ce <__sclose>:
 80009ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009d2:	f000 b89d 	b.w	8000b10 <_close_r>

080009d6 <__swbuf_r>:
 80009d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009d8:	460e      	mov	r6, r1
 80009da:	4614      	mov	r4, r2
 80009dc:	4605      	mov	r5, r0
 80009de:	b118      	cbz	r0, 80009e8 <__swbuf_r+0x12>
 80009e0:	6a03      	ldr	r3, [r0, #32]
 80009e2:	b90b      	cbnz	r3, 80009e8 <__swbuf_r+0x12>
 80009e4:	f7ff ff20 	bl	8000828 <__sinit>
 80009e8:	69a3      	ldr	r3, [r4, #24]
 80009ea:	60a3      	str	r3, [r4, #8]
 80009ec:	89a3      	ldrh	r3, [r4, #12]
 80009ee:	071a      	lsls	r2, r3, #28
 80009f0:	d501      	bpl.n	80009f6 <__swbuf_r+0x20>
 80009f2:	6923      	ldr	r3, [r4, #16]
 80009f4:	b943      	cbnz	r3, 8000a08 <__swbuf_r+0x32>
 80009f6:	4621      	mov	r1, r4
 80009f8:	4628      	mov	r0, r5
 80009fa:	f000 f82b 	bl	8000a54 <__swsetup_r>
 80009fe:	b118      	cbz	r0, 8000a08 <__swbuf_r+0x32>
 8000a00:	f04f 37ff 	mov.w	r7, #4294967295
 8000a04:	4638      	mov	r0, r7
 8000a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a08:	6823      	ldr	r3, [r4, #0]
 8000a0a:	6922      	ldr	r2, [r4, #16]
 8000a0c:	1a98      	subs	r0, r3, r2
 8000a0e:	6963      	ldr	r3, [r4, #20]
 8000a10:	b2f6      	uxtb	r6, r6
 8000a12:	4283      	cmp	r3, r0
 8000a14:	4637      	mov	r7, r6
 8000a16:	dc05      	bgt.n	8000a24 <__swbuf_r+0x4e>
 8000a18:	4621      	mov	r1, r4
 8000a1a:	4628      	mov	r0, r5
 8000a1c:	f000 fa68 	bl	8000ef0 <_fflush_r>
 8000a20:	2800      	cmp	r0, #0
 8000a22:	d1ed      	bne.n	8000a00 <__swbuf_r+0x2a>
 8000a24:	68a3      	ldr	r3, [r4, #8]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	60a3      	str	r3, [r4, #8]
 8000a2a:	6823      	ldr	r3, [r4, #0]
 8000a2c:	1c5a      	adds	r2, r3, #1
 8000a2e:	6022      	str	r2, [r4, #0]
 8000a30:	701e      	strb	r6, [r3, #0]
 8000a32:	6962      	ldr	r2, [r4, #20]
 8000a34:	1c43      	adds	r3, r0, #1
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d004      	beq.n	8000a44 <__swbuf_r+0x6e>
 8000a3a:	89a3      	ldrh	r3, [r4, #12]
 8000a3c:	07db      	lsls	r3, r3, #31
 8000a3e:	d5e1      	bpl.n	8000a04 <__swbuf_r+0x2e>
 8000a40:	2e0a      	cmp	r6, #10
 8000a42:	d1df      	bne.n	8000a04 <__swbuf_r+0x2e>
 8000a44:	4621      	mov	r1, r4
 8000a46:	4628      	mov	r0, r5
 8000a48:	f000 fa52 	bl	8000ef0 <_fflush_r>
 8000a4c:	2800      	cmp	r0, #0
 8000a4e:	d0d9      	beq.n	8000a04 <__swbuf_r+0x2e>
 8000a50:	e7d6      	b.n	8000a00 <__swbuf_r+0x2a>
	...

08000a54 <__swsetup_r>:
 8000a54:	b538      	push	{r3, r4, r5, lr}
 8000a56:	4b29      	ldr	r3, [pc, #164]	@ (8000afc <__swsetup_r+0xa8>)
 8000a58:	4605      	mov	r5, r0
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	460c      	mov	r4, r1
 8000a5e:	b118      	cbz	r0, 8000a68 <__swsetup_r+0x14>
 8000a60:	6a03      	ldr	r3, [r0, #32]
 8000a62:	b90b      	cbnz	r3, 8000a68 <__swsetup_r+0x14>
 8000a64:	f7ff fee0 	bl	8000828 <__sinit>
 8000a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a6c:	0719      	lsls	r1, r3, #28
 8000a6e:	d422      	bmi.n	8000ab6 <__swsetup_r+0x62>
 8000a70:	06da      	lsls	r2, r3, #27
 8000a72:	d407      	bmi.n	8000a84 <__swsetup_r+0x30>
 8000a74:	2209      	movs	r2, #9
 8000a76:	602a      	str	r2, [r5, #0]
 8000a78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a7c:	81a3      	strh	r3, [r4, #12]
 8000a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a82:	e033      	b.n	8000aec <__swsetup_r+0x98>
 8000a84:	0758      	lsls	r0, r3, #29
 8000a86:	d512      	bpl.n	8000aae <__swsetup_r+0x5a>
 8000a88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000a8a:	b141      	cbz	r1, 8000a9e <__swsetup_r+0x4a>
 8000a8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000a90:	4299      	cmp	r1, r3
 8000a92:	d002      	beq.n	8000a9a <__swsetup_r+0x46>
 8000a94:	4628      	mov	r0, r5
 8000a96:	f000 f8af 	bl	8000bf8 <_free_r>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8000a9e:	89a3      	ldrh	r3, [r4, #12]
 8000aa0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000aa4:	81a3      	strh	r3, [r4, #12]
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	6063      	str	r3, [r4, #4]
 8000aaa:	6923      	ldr	r3, [r4, #16]
 8000aac:	6023      	str	r3, [r4, #0]
 8000aae:	89a3      	ldrh	r3, [r4, #12]
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	81a3      	strh	r3, [r4, #12]
 8000ab6:	6923      	ldr	r3, [r4, #16]
 8000ab8:	b94b      	cbnz	r3, 8000ace <__swsetup_r+0x7a>
 8000aba:	89a3      	ldrh	r3, [r4, #12]
 8000abc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000ac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ac4:	d003      	beq.n	8000ace <__swsetup_r+0x7a>
 8000ac6:	4621      	mov	r1, r4
 8000ac8:	4628      	mov	r0, r5
 8000aca:	f000 fa5f 	bl	8000f8c <__smakebuf_r>
 8000ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ad2:	f013 0201 	ands.w	r2, r3, #1
 8000ad6:	d00a      	beq.n	8000aee <__swsetup_r+0x9a>
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60a2      	str	r2, [r4, #8]
 8000adc:	6962      	ldr	r2, [r4, #20]
 8000ade:	4252      	negs	r2, r2
 8000ae0:	61a2      	str	r2, [r4, #24]
 8000ae2:	6922      	ldr	r2, [r4, #16]
 8000ae4:	b942      	cbnz	r2, 8000af8 <__swsetup_r+0xa4>
 8000ae6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000aea:	d1c5      	bne.n	8000a78 <__swsetup_r+0x24>
 8000aec:	bd38      	pop	{r3, r4, r5, pc}
 8000aee:	0799      	lsls	r1, r3, #30
 8000af0:	bf58      	it	pl
 8000af2:	6962      	ldrpl	r2, [r4, #20]
 8000af4:	60a2      	str	r2, [r4, #8]
 8000af6:	e7f4      	b.n	8000ae2 <__swsetup_r+0x8e>
 8000af8:	2000      	movs	r0, #0
 8000afa:	e7f7      	b.n	8000aec <__swsetup_r+0x98>
 8000afc:	20000010 	.word	0x20000010

08000b00 <memset>:
 8000b00:	4402      	add	r2, r0
 8000b02:	4603      	mov	r3, r0
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d100      	bne.n	8000b0a <memset+0xa>
 8000b08:	4770      	bx	lr
 8000b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8000b0e:	e7f9      	b.n	8000b04 <memset+0x4>

08000b10 <_close_r>:
 8000b10:	b538      	push	{r3, r4, r5, lr}
 8000b12:	4d06      	ldr	r5, [pc, #24]	@ (8000b2c <_close_r+0x1c>)
 8000b14:	2300      	movs	r3, #0
 8000b16:	4604      	mov	r4, r0
 8000b18:	4608      	mov	r0, r1
 8000b1a:	602b      	str	r3, [r5, #0]
 8000b1c:	f7ff fd63 	bl	80005e6 <_close>
 8000b20:	1c43      	adds	r3, r0, #1
 8000b22:	d102      	bne.n	8000b2a <_close_r+0x1a>
 8000b24:	682b      	ldr	r3, [r5, #0]
 8000b26:	b103      	cbz	r3, 8000b2a <_close_r+0x1a>
 8000b28:	6023      	str	r3, [r4, #0]
 8000b2a:	bd38      	pop	{r3, r4, r5, pc}
 8000b2c:	2000020c 	.word	0x2000020c

08000b30 <_lseek_r>:
 8000b30:	b538      	push	{r3, r4, r5, lr}
 8000b32:	4d07      	ldr	r5, [pc, #28]	@ (8000b50 <_lseek_r+0x20>)
 8000b34:	4604      	mov	r4, r0
 8000b36:	4608      	mov	r0, r1
 8000b38:	4611      	mov	r1, r2
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	602a      	str	r2, [r5, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	f7ff fd78 	bl	8000634 <_lseek>
 8000b44:	1c43      	adds	r3, r0, #1
 8000b46:	d102      	bne.n	8000b4e <_lseek_r+0x1e>
 8000b48:	682b      	ldr	r3, [r5, #0]
 8000b4a:	b103      	cbz	r3, 8000b4e <_lseek_r+0x1e>
 8000b4c:	6023      	str	r3, [r4, #0]
 8000b4e:	bd38      	pop	{r3, r4, r5, pc}
 8000b50:	2000020c 	.word	0x2000020c

08000b54 <_read_r>:
 8000b54:	b538      	push	{r3, r4, r5, lr}
 8000b56:	4d07      	ldr	r5, [pc, #28]	@ (8000b74 <_read_r+0x20>)
 8000b58:	4604      	mov	r4, r0
 8000b5a:	4608      	mov	r0, r1
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	2200      	movs	r2, #0
 8000b60:	602a      	str	r2, [r5, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	f7ff fd06 	bl	8000574 <_read>
 8000b68:	1c43      	adds	r3, r0, #1
 8000b6a:	d102      	bne.n	8000b72 <_read_r+0x1e>
 8000b6c:	682b      	ldr	r3, [r5, #0]
 8000b6e:	b103      	cbz	r3, 8000b72 <_read_r+0x1e>
 8000b70:	6023      	str	r3, [r4, #0]
 8000b72:	bd38      	pop	{r3, r4, r5, pc}
 8000b74:	2000020c 	.word	0x2000020c

08000b78 <_write_r>:
 8000b78:	b538      	push	{r3, r4, r5, lr}
 8000b7a:	4d07      	ldr	r5, [pc, #28]	@ (8000b98 <_write_r+0x20>)
 8000b7c:	4604      	mov	r4, r0
 8000b7e:	4608      	mov	r0, r1
 8000b80:	4611      	mov	r1, r2
 8000b82:	2200      	movs	r2, #0
 8000b84:	602a      	str	r2, [r5, #0]
 8000b86:	461a      	mov	r2, r3
 8000b88:	f7ff fd11 	bl	80005ae <_write>
 8000b8c:	1c43      	adds	r3, r0, #1
 8000b8e:	d102      	bne.n	8000b96 <_write_r+0x1e>
 8000b90:	682b      	ldr	r3, [r5, #0]
 8000b92:	b103      	cbz	r3, 8000b96 <_write_r+0x1e>
 8000b94:	6023      	str	r3, [r4, #0]
 8000b96:	bd38      	pop	{r3, r4, r5, pc}
 8000b98:	2000020c 	.word	0x2000020c

08000b9c <__errno>:
 8000b9c:	4b01      	ldr	r3, [pc, #4]	@ (8000ba4 <__errno+0x8>)
 8000b9e:	6818      	ldr	r0, [r3, #0]
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000010 	.word	0x20000010

08000ba8 <__libc_init_array>:
 8000ba8:	b570      	push	{r4, r5, r6, lr}
 8000baa:	4d0d      	ldr	r5, [pc, #52]	@ (8000be0 <__libc_init_array+0x38>)
 8000bac:	4c0d      	ldr	r4, [pc, #52]	@ (8000be4 <__libc_init_array+0x3c>)
 8000bae:	1b64      	subs	r4, r4, r5
 8000bb0:	10a4      	asrs	r4, r4, #2
 8000bb2:	2600      	movs	r6, #0
 8000bb4:	42a6      	cmp	r6, r4
 8000bb6:	d109      	bne.n	8000bcc <__libc_init_array+0x24>
 8000bb8:	4d0b      	ldr	r5, [pc, #44]	@ (8000be8 <__libc_init_array+0x40>)
 8000bba:	4c0c      	ldr	r4, [pc, #48]	@ (8000bec <__libc_init_array+0x44>)
 8000bbc:	f000 fa54 	bl	8001068 <_init>
 8000bc0:	1b64      	subs	r4, r4, r5
 8000bc2:	10a4      	asrs	r4, r4, #2
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	42a6      	cmp	r6, r4
 8000bc8:	d105      	bne.n	8000bd6 <__libc_init_array+0x2e>
 8000bca:	bd70      	pop	{r4, r5, r6, pc}
 8000bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bd0:	4798      	blx	r3
 8000bd2:	3601      	adds	r6, #1
 8000bd4:	e7ee      	b.n	8000bb4 <__libc_init_array+0xc>
 8000bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bda:	4798      	blx	r3
 8000bdc:	3601      	adds	r6, #1
 8000bde:	e7f2      	b.n	8000bc6 <__libc_init_array+0x1e>
 8000be0:	080010e8 	.word	0x080010e8
 8000be4:	080010e8 	.word	0x080010e8
 8000be8:	080010e8 	.word	0x080010e8
 8000bec:	080010ec 	.word	0x080010ec

08000bf0 <__retarget_lock_init_recursive>:
 8000bf0:	4770      	bx	lr

08000bf2 <__retarget_lock_acquire_recursive>:
 8000bf2:	4770      	bx	lr

08000bf4 <__retarget_lock_release_recursive>:
 8000bf4:	4770      	bx	lr
	...

08000bf8 <_free_r>:
 8000bf8:	b538      	push	{r3, r4, r5, lr}
 8000bfa:	4605      	mov	r5, r0
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	d041      	beq.n	8000c84 <_free_r+0x8c>
 8000c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c04:	1f0c      	subs	r4, r1, #4
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	bfb8      	it	lt
 8000c0a:	18e4      	addlt	r4, r4, r3
 8000c0c:	f000 f8e0 	bl	8000dd0 <__malloc_lock>
 8000c10:	4a1d      	ldr	r2, [pc, #116]	@ (8000c88 <_free_r+0x90>)
 8000c12:	6813      	ldr	r3, [r2, #0]
 8000c14:	b933      	cbnz	r3, 8000c24 <_free_r+0x2c>
 8000c16:	6063      	str	r3, [r4, #4]
 8000c18:	6014      	str	r4, [r2, #0]
 8000c1a:	4628      	mov	r0, r5
 8000c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c20:	f000 b8dc 	b.w	8000ddc <__malloc_unlock>
 8000c24:	42a3      	cmp	r3, r4
 8000c26:	d908      	bls.n	8000c3a <_free_r+0x42>
 8000c28:	6820      	ldr	r0, [r4, #0]
 8000c2a:	1821      	adds	r1, r4, r0
 8000c2c:	428b      	cmp	r3, r1
 8000c2e:	bf01      	itttt	eq
 8000c30:	6819      	ldreq	r1, [r3, #0]
 8000c32:	685b      	ldreq	r3, [r3, #4]
 8000c34:	1809      	addeq	r1, r1, r0
 8000c36:	6021      	streq	r1, [r4, #0]
 8000c38:	e7ed      	b.n	8000c16 <_free_r+0x1e>
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	b10b      	cbz	r3, 8000c44 <_free_r+0x4c>
 8000c40:	42a3      	cmp	r3, r4
 8000c42:	d9fa      	bls.n	8000c3a <_free_r+0x42>
 8000c44:	6811      	ldr	r1, [r2, #0]
 8000c46:	1850      	adds	r0, r2, r1
 8000c48:	42a0      	cmp	r0, r4
 8000c4a:	d10b      	bne.n	8000c64 <_free_r+0x6c>
 8000c4c:	6820      	ldr	r0, [r4, #0]
 8000c4e:	4401      	add	r1, r0
 8000c50:	1850      	adds	r0, r2, r1
 8000c52:	4283      	cmp	r3, r0
 8000c54:	6011      	str	r1, [r2, #0]
 8000c56:	d1e0      	bne.n	8000c1a <_free_r+0x22>
 8000c58:	6818      	ldr	r0, [r3, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	6053      	str	r3, [r2, #4]
 8000c5e:	4408      	add	r0, r1
 8000c60:	6010      	str	r0, [r2, #0]
 8000c62:	e7da      	b.n	8000c1a <_free_r+0x22>
 8000c64:	d902      	bls.n	8000c6c <_free_r+0x74>
 8000c66:	230c      	movs	r3, #12
 8000c68:	602b      	str	r3, [r5, #0]
 8000c6a:	e7d6      	b.n	8000c1a <_free_r+0x22>
 8000c6c:	6820      	ldr	r0, [r4, #0]
 8000c6e:	1821      	adds	r1, r4, r0
 8000c70:	428b      	cmp	r3, r1
 8000c72:	bf04      	itt	eq
 8000c74:	6819      	ldreq	r1, [r3, #0]
 8000c76:	685b      	ldreq	r3, [r3, #4]
 8000c78:	6063      	str	r3, [r4, #4]
 8000c7a:	bf04      	itt	eq
 8000c7c:	1809      	addeq	r1, r1, r0
 8000c7e:	6021      	streq	r1, [r4, #0]
 8000c80:	6054      	str	r4, [r2, #4]
 8000c82:	e7ca      	b.n	8000c1a <_free_r+0x22>
 8000c84:	bd38      	pop	{r3, r4, r5, pc}
 8000c86:	bf00      	nop
 8000c88:	20000218 	.word	0x20000218

08000c8c <sbrk_aligned>:
 8000c8c:	b570      	push	{r4, r5, r6, lr}
 8000c8e:	4e0f      	ldr	r6, [pc, #60]	@ (8000ccc <sbrk_aligned+0x40>)
 8000c90:	460c      	mov	r4, r1
 8000c92:	6831      	ldr	r1, [r6, #0]
 8000c94:	4605      	mov	r5, r0
 8000c96:	b911      	cbnz	r1, 8000c9e <sbrk_aligned+0x12>
 8000c98:	f000 f9d6 	bl	8001048 <_sbrk_r>
 8000c9c:	6030      	str	r0, [r6, #0]
 8000c9e:	4621      	mov	r1, r4
 8000ca0:	4628      	mov	r0, r5
 8000ca2:	f000 f9d1 	bl	8001048 <_sbrk_r>
 8000ca6:	1c43      	adds	r3, r0, #1
 8000ca8:	d103      	bne.n	8000cb2 <sbrk_aligned+0x26>
 8000caa:	f04f 34ff 	mov.w	r4, #4294967295
 8000cae:	4620      	mov	r0, r4
 8000cb0:	bd70      	pop	{r4, r5, r6, pc}
 8000cb2:	1cc4      	adds	r4, r0, #3
 8000cb4:	f024 0403 	bic.w	r4, r4, #3
 8000cb8:	42a0      	cmp	r0, r4
 8000cba:	d0f8      	beq.n	8000cae <sbrk_aligned+0x22>
 8000cbc:	1a21      	subs	r1, r4, r0
 8000cbe:	4628      	mov	r0, r5
 8000cc0:	f000 f9c2 	bl	8001048 <_sbrk_r>
 8000cc4:	3001      	adds	r0, #1
 8000cc6:	d1f2      	bne.n	8000cae <sbrk_aligned+0x22>
 8000cc8:	e7ef      	b.n	8000caa <sbrk_aligned+0x1e>
 8000cca:	bf00      	nop
 8000ccc:	20000214 	.word	0x20000214

08000cd0 <_malloc_r>:
 8000cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cd4:	1ccd      	adds	r5, r1, #3
 8000cd6:	f025 0503 	bic.w	r5, r5, #3
 8000cda:	3508      	adds	r5, #8
 8000cdc:	2d0c      	cmp	r5, #12
 8000cde:	bf38      	it	cc
 8000ce0:	250c      	movcc	r5, #12
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	4606      	mov	r6, r0
 8000ce6:	db01      	blt.n	8000cec <_malloc_r+0x1c>
 8000ce8:	42a9      	cmp	r1, r5
 8000cea:	d904      	bls.n	8000cf6 <_malloc_r+0x26>
 8000cec:	230c      	movs	r3, #12
 8000cee:	6033      	str	r3, [r6, #0]
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000dcc <_malloc_r+0xfc>
 8000cfa:	f000 f869 	bl	8000dd0 <__malloc_lock>
 8000cfe:	f8d8 3000 	ldr.w	r3, [r8]
 8000d02:	461c      	mov	r4, r3
 8000d04:	bb44      	cbnz	r4, 8000d58 <_malloc_r+0x88>
 8000d06:	4629      	mov	r1, r5
 8000d08:	4630      	mov	r0, r6
 8000d0a:	f7ff ffbf 	bl	8000c8c <sbrk_aligned>
 8000d0e:	1c43      	adds	r3, r0, #1
 8000d10:	4604      	mov	r4, r0
 8000d12:	d158      	bne.n	8000dc6 <_malloc_r+0xf6>
 8000d14:	f8d8 4000 	ldr.w	r4, [r8]
 8000d18:	4627      	mov	r7, r4
 8000d1a:	2f00      	cmp	r7, #0
 8000d1c:	d143      	bne.n	8000da6 <_malloc_r+0xd6>
 8000d1e:	2c00      	cmp	r4, #0
 8000d20:	d04b      	beq.n	8000dba <_malloc_r+0xea>
 8000d22:	6823      	ldr	r3, [r4, #0]
 8000d24:	4639      	mov	r1, r7
 8000d26:	4630      	mov	r0, r6
 8000d28:	eb04 0903 	add.w	r9, r4, r3
 8000d2c:	f000 f98c 	bl	8001048 <_sbrk_r>
 8000d30:	4581      	cmp	r9, r0
 8000d32:	d142      	bne.n	8000dba <_malloc_r+0xea>
 8000d34:	6821      	ldr	r1, [r4, #0]
 8000d36:	1a6d      	subs	r5, r5, r1
 8000d38:	4629      	mov	r1, r5
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	f7ff ffa6 	bl	8000c8c <sbrk_aligned>
 8000d40:	3001      	adds	r0, #1
 8000d42:	d03a      	beq.n	8000dba <_malloc_r+0xea>
 8000d44:	6823      	ldr	r3, [r4, #0]
 8000d46:	442b      	add	r3, r5
 8000d48:	6023      	str	r3, [r4, #0]
 8000d4a:	f8d8 3000 	ldr.w	r3, [r8]
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	bb62      	cbnz	r2, 8000dac <_malloc_r+0xdc>
 8000d52:	f8c8 7000 	str.w	r7, [r8]
 8000d56:	e00f      	b.n	8000d78 <_malloc_r+0xa8>
 8000d58:	6822      	ldr	r2, [r4, #0]
 8000d5a:	1b52      	subs	r2, r2, r5
 8000d5c:	d420      	bmi.n	8000da0 <_malloc_r+0xd0>
 8000d5e:	2a0b      	cmp	r2, #11
 8000d60:	d917      	bls.n	8000d92 <_malloc_r+0xc2>
 8000d62:	1961      	adds	r1, r4, r5
 8000d64:	42a3      	cmp	r3, r4
 8000d66:	6025      	str	r5, [r4, #0]
 8000d68:	bf18      	it	ne
 8000d6a:	6059      	strne	r1, [r3, #4]
 8000d6c:	6863      	ldr	r3, [r4, #4]
 8000d6e:	bf08      	it	eq
 8000d70:	f8c8 1000 	streq.w	r1, [r8]
 8000d74:	5162      	str	r2, [r4, r5]
 8000d76:	604b      	str	r3, [r1, #4]
 8000d78:	4630      	mov	r0, r6
 8000d7a:	f000 f82f 	bl	8000ddc <__malloc_unlock>
 8000d7e:	f104 000b 	add.w	r0, r4, #11
 8000d82:	1d23      	adds	r3, r4, #4
 8000d84:	f020 0007 	bic.w	r0, r0, #7
 8000d88:	1ac2      	subs	r2, r0, r3
 8000d8a:	bf1c      	itt	ne
 8000d8c:	1a1b      	subne	r3, r3, r0
 8000d8e:	50a3      	strne	r3, [r4, r2]
 8000d90:	e7af      	b.n	8000cf2 <_malloc_r+0x22>
 8000d92:	6862      	ldr	r2, [r4, #4]
 8000d94:	42a3      	cmp	r3, r4
 8000d96:	bf0c      	ite	eq
 8000d98:	f8c8 2000 	streq.w	r2, [r8]
 8000d9c:	605a      	strne	r2, [r3, #4]
 8000d9e:	e7eb      	b.n	8000d78 <_malloc_r+0xa8>
 8000da0:	4623      	mov	r3, r4
 8000da2:	6864      	ldr	r4, [r4, #4]
 8000da4:	e7ae      	b.n	8000d04 <_malloc_r+0x34>
 8000da6:	463c      	mov	r4, r7
 8000da8:	687f      	ldr	r7, [r7, #4]
 8000daa:	e7b6      	b.n	8000d1a <_malloc_r+0x4a>
 8000dac:	461a      	mov	r2, r3
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	42a3      	cmp	r3, r4
 8000db2:	d1fb      	bne.n	8000dac <_malloc_r+0xdc>
 8000db4:	2300      	movs	r3, #0
 8000db6:	6053      	str	r3, [r2, #4]
 8000db8:	e7de      	b.n	8000d78 <_malloc_r+0xa8>
 8000dba:	230c      	movs	r3, #12
 8000dbc:	6033      	str	r3, [r6, #0]
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	f000 f80c 	bl	8000ddc <__malloc_unlock>
 8000dc4:	e794      	b.n	8000cf0 <_malloc_r+0x20>
 8000dc6:	6005      	str	r5, [r0, #0]
 8000dc8:	e7d6      	b.n	8000d78 <_malloc_r+0xa8>
 8000dca:	bf00      	nop
 8000dcc:	20000218 	.word	0x20000218

08000dd0 <__malloc_lock>:
 8000dd0:	4801      	ldr	r0, [pc, #4]	@ (8000dd8 <__malloc_lock+0x8>)
 8000dd2:	f7ff bf0e 	b.w	8000bf2 <__retarget_lock_acquire_recursive>
 8000dd6:	bf00      	nop
 8000dd8:	20000210 	.word	0x20000210

08000ddc <__malloc_unlock>:
 8000ddc:	4801      	ldr	r0, [pc, #4]	@ (8000de4 <__malloc_unlock+0x8>)
 8000dde:	f7ff bf09 	b.w	8000bf4 <__retarget_lock_release_recursive>
 8000de2:	bf00      	nop
 8000de4:	20000210 	.word	0x20000210

08000de8 <__sflush_r>:
 8000de8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000df0:	0716      	lsls	r6, r2, #28
 8000df2:	4605      	mov	r5, r0
 8000df4:	460c      	mov	r4, r1
 8000df6:	d454      	bmi.n	8000ea2 <__sflush_r+0xba>
 8000df8:	684b      	ldr	r3, [r1, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	dc02      	bgt.n	8000e04 <__sflush_r+0x1c>
 8000dfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	dd48      	ble.n	8000e96 <__sflush_r+0xae>
 8000e04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000e06:	2e00      	cmp	r6, #0
 8000e08:	d045      	beq.n	8000e96 <__sflush_r+0xae>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000e10:	682f      	ldr	r7, [r5, #0]
 8000e12:	6a21      	ldr	r1, [r4, #32]
 8000e14:	602b      	str	r3, [r5, #0]
 8000e16:	d030      	beq.n	8000e7a <__sflush_r+0x92>
 8000e18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000e1a:	89a3      	ldrh	r3, [r4, #12]
 8000e1c:	0759      	lsls	r1, r3, #29
 8000e1e:	d505      	bpl.n	8000e2c <__sflush_r+0x44>
 8000e20:	6863      	ldr	r3, [r4, #4]
 8000e22:	1ad2      	subs	r2, r2, r3
 8000e24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000e26:	b10b      	cbz	r3, 8000e2c <__sflush_r+0x44>
 8000e28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000e2a:	1ad2      	subs	r2, r2, r3
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000e30:	6a21      	ldr	r1, [r4, #32]
 8000e32:	4628      	mov	r0, r5
 8000e34:	47b0      	blx	r6
 8000e36:	1c43      	adds	r3, r0, #1
 8000e38:	89a3      	ldrh	r3, [r4, #12]
 8000e3a:	d106      	bne.n	8000e4a <__sflush_r+0x62>
 8000e3c:	6829      	ldr	r1, [r5, #0]
 8000e3e:	291d      	cmp	r1, #29
 8000e40:	d82b      	bhi.n	8000e9a <__sflush_r+0xb2>
 8000e42:	4a2a      	ldr	r2, [pc, #168]	@ (8000eec <__sflush_r+0x104>)
 8000e44:	410a      	asrs	r2, r1
 8000e46:	07d6      	lsls	r6, r2, #31
 8000e48:	d427      	bmi.n	8000e9a <__sflush_r+0xb2>
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	6062      	str	r2, [r4, #4]
 8000e4e:	04d9      	lsls	r1, r3, #19
 8000e50:	6922      	ldr	r2, [r4, #16]
 8000e52:	6022      	str	r2, [r4, #0]
 8000e54:	d504      	bpl.n	8000e60 <__sflush_r+0x78>
 8000e56:	1c42      	adds	r2, r0, #1
 8000e58:	d101      	bne.n	8000e5e <__sflush_r+0x76>
 8000e5a:	682b      	ldr	r3, [r5, #0]
 8000e5c:	b903      	cbnz	r3, 8000e60 <__sflush_r+0x78>
 8000e5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8000e60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000e62:	602f      	str	r7, [r5, #0]
 8000e64:	b1b9      	cbz	r1, 8000e96 <__sflush_r+0xae>
 8000e66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	d002      	beq.n	8000e74 <__sflush_r+0x8c>
 8000e6e:	4628      	mov	r0, r5
 8000e70:	f7ff fec2 	bl	8000bf8 <_free_r>
 8000e74:	2300      	movs	r3, #0
 8000e76:	6363      	str	r3, [r4, #52]	@ 0x34
 8000e78:	e00d      	b.n	8000e96 <__sflush_r+0xae>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	47b0      	blx	r6
 8000e80:	4602      	mov	r2, r0
 8000e82:	1c50      	adds	r0, r2, #1
 8000e84:	d1c9      	bne.n	8000e1a <__sflush_r+0x32>
 8000e86:	682b      	ldr	r3, [r5, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0c6      	beq.n	8000e1a <__sflush_r+0x32>
 8000e8c:	2b1d      	cmp	r3, #29
 8000e8e:	d001      	beq.n	8000e94 <__sflush_r+0xac>
 8000e90:	2b16      	cmp	r3, #22
 8000e92:	d11e      	bne.n	8000ed2 <__sflush_r+0xea>
 8000e94:	602f      	str	r7, [r5, #0]
 8000e96:	2000      	movs	r0, #0
 8000e98:	e022      	b.n	8000ee0 <__sflush_r+0xf8>
 8000e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e9e:	b21b      	sxth	r3, r3
 8000ea0:	e01b      	b.n	8000eda <__sflush_r+0xf2>
 8000ea2:	690f      	ldr	r7, [r1, #16]
 8000ea4:	2f00      	cmp	r7, #0
 8000ea6:	d0f6      	beq.n	8000e96 <__sflush_r+0xae>
 8000ea8:	0793      	lsls	r3, r2, #30
 8000eaa:	680e      	ldr	r6, [r1, #0]
 8000eac:	bf08      	it	eq
 8000eae:	694b      	ldreq	r3, [r1, #20]
 8000eb0:	600f      	str	r7, [r1, #0]
 8000eb2:	bf18      	it	ne
 8000eb4:	2300      	movne	r3, #0
 8000eb6:	eba6 0807 	sub.w	r8, r6, r7
 8000eba:	608b      	str	r3, [r1, #8]
 8000ebc:	f1b8 0f00 	cmp.w	r8, #0
 8000ec0:	dde9      	ble.n	8000e96 <__sflush_r+0xae>
 8000ec2:	6a21      	ldr	r1, [r4, #32]
 8000ec4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000ec6:	4643      	mov	r3, r8
 8000ec8:	463a      	mov	r2, r7
 8000eca:	4628      	mov	r0, r5
 8000ecc:	47b0      	blx	r6
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	dc08      	bgt.n	8000ee4 <__sflush_r+0xfc>
 8000ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eda:	81a3      	strh	r3, [r4, #12]
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ee4:	4407      	add	r7, r0
 8000ee6:	eba8 0800 	sub.w	r8, r8, r0
 8000eea:	e7e7      	b.n	8000ebc <__sflush_r+0xd4>
 8000eec:	dfbffffe 	.word	0xdfbffffe

08000ef0 <_fflush_r>:
 8000ef0:	b538      	push	{r3, r4, r5, lr}
 8000ef2:	690b      	ldr	r3, [r1, #16]
 8000ef4:	4605      	mov	r5, r0
 8000ef6:	460c      	mov	r4, r1
 8000ef8:	b913      	cbnz	r3, 8000f00 <_fflush_r+0x10>
 8000efa:	2500      	movs	r5, #0
 8000efc:	4628      	mov	r0, r5
 8000efe:	bd38      	pop	{r3, r4, r5, pc}
 8000f00:	b118      	cbz	r0, 8000f0a <_fflush_r+0x1a>
 8000f02:	6a03      	ldr	r3, [r0, #32]
 8000f04:	b90b      	cbnz	r3, 8000f0a <_fflush_r+0x1a>
 8000f06:	f7ff fc8f 	bl	8000828 <__sinit>
 8000f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0f3      	beq.n	8000efa <_fflush_r+0xa>
 8000f12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000f14:	07d0      	lsls	r0, r2, #31
 8000f16:	d404      	bmi.n	8000f22 <_fflush_r+0x32>
 8000f18:	0599      	lsls	r1, r3, #22
 8000f1a:	d402      	bmi.n	8000f22 <_fflush_r+0x32>
 8000f1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000f1e:	f7ff fe68 	bl	8000bf2 <__retarget_lock_acquire_recursive>
 8000f22:	4628      	mov	r0, r5
 8000f24:	4621      	mov	r1, r4
 8000f26:	f7ff ff5f 	bl	8000de8 <__sflush_r>
 8000f2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000f2c:	07da      	lsls	r2, r3, #31
 8000f2e:	4605      	mov	r5, r0
 8000f30:	d4e4      	bmi.n	8000efc <_fflush_r+0xc>
 8000f32:	89a3      	ldrh	r3, [r4, #12]
 8000f34:	059b      	lsls	r3, r3, #22
 8000f36:	d4e1      	bmi.n	8000efc <_fflush_r+0xc>
 8000f38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000f3a:	f7ff fe5b 	bl	8000bf4 <__retarget_lock_release_recursive>
 8000f3e:	e7dd      	b.n	8000efc <_fflush_r+0xc>

08000f40 <__swhatbuf_r>:
 8000f40:	b570      	push	{r4, r5, r6, lr}
 8000f42:	460c      	mov	r4, r1
 8000f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	b096      	sub	sp, #88	@ 0x58
 8000f4c:	4615      	mov	r5, r2
 8000f4e:	461e      	mov	r6, r3
 8000f50:	da0d      	bge.n	8000f6e <__swhatbuf_r+0x2e>
 8000f52:	89a3      	ldrh	r3, [r4, #12]
 8000f54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000f58:	f04f 0100 	mov.w	r1, #0
 8000f5c:	bf14      	ite	ne
 8000f5e:	2340      	movne	r3, #64	@ 0x40
 8000f60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000f64:	2000      	movs	r0, #0
 8000f66:	6031      	str	r1, [r6, #0]
 8000f68:	602b      	str	r3, [r5, #0]
 8000f6a:	b016      	add	sp, #88	@ 0x58
 8000f6c:	bd70      	pop	{r4, r5, r6, pc}
 8000f6e:	466a      	mov	r2, sp
 8000f70:	f000 f848 	bl	8001004 <_fstat_r>
 8000f74:	2800      	cmp	r0, #0
 8000f76:	dbec      	blt.n	8000f52 <__swhatbuf_r+0x12>
 8000f78:	9901      	ldr	r1, [sp, #4]
 8000f7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000f7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000f82:	4259      	negs	r1, r3
 8000f84:	4159      	adcs	r1, r3
 8000f86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f8a:	e7eb      	b.n	8000f64 <__swhatbuf_r+0x24>

08000f8c <__smakebuf_r>:
 8000f8c:	898b      	ldrh	r3, [r1, #12]
 8000f8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f90:	079d      	lsls	r5, r3, #30
 8000f92:	4606      	mov	r6, r0
 8000f94:	460c      	mov	r4, r1
 8000f96:	d507      	bpl.n	8000fa8 <__smakebuf_r+0x1c>
 8000f98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000f9c:	6023      	str	r3, [r4, #0]
 8000f9e:	6123      	str	r3, [r4, #16]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	6163      	str	r3, [r4, #20]
 8000fa4:	b003      	add	sp, #12
 8000fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fa8:	ab01      	add	r3, sp, #4
 8000faa:	466a      	mov	r2, sp
 8000fac:	f7ff ffc8 	bl	8000f40 <__swhatbuf_r>
 8000fb0:	9f00      	ldr	r7, [sp, #0]
 8000fb2:	4605      	mov	r5, r0
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	4630      	mov	r0, r6
 8000fb8:	f7ff fe8a 	bl	8000cd0 <_malloc_r>
 8000fbc:	b948      	cbnz	r0, 8000fd2 <__smakebuf_r+0x46>
 8000fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000fc2:	059a      	lsls	r2, r3, #22
 8000fc4:	d4ee      	bmi.n	8000fa4 <__smakebuf_r+0x18>
 8000fc6:	f023 0303 	bic.w	r3, r3, #3
 8000fca:	f043 0302 	orr.w	r3, r3, #2
 8000fce:	81a3      	strh	r3, [r4, #12]
 8000fd0:	e7e2      	b.n	8000f98 <__smakebuf_r+0xc>
 8000fd2:	89a3      	ldrh	r3, [r4, #12]
 8000fd4:	6020      	str	r0, [r4, #0]
 8000fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fda:	81a3      	strh	r3, [r4, #12]
 8000fdc:	9b01      	ldr	r3, [sp, #4]
 8000fde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000fe2:	b15b      	cbz	r3, 8000ffc <__smakebuf_r+0x70>
 8000fe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fe8:	4630      	mov	r0, r6
 8000fea:	f000 f81d 	bl	8001028 <_isatty_r>
 8000fee:	b128      	cbz	r0, 8000ffc <__smakebuf_r+0x70>
 8000ff0:	89a3      	ldrh	r3, [r4, #12]
 8000ff2:	f023 0303 	bic.w	r3, r3, #3
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	81a3      	strh	r3, [r4, #12]
 8000ffc:	89a3      	ldrh	r3, [r4, #12]
 8000ffe:	431d      	orrs	r5, r3
 8001000:	81a5      	strh	r5, [r4, #12]
 8001002:	e7cf      	b.n	8000fa4 <__smakebuf_r+0x18>

08001004 <_fstat_r>:
 8001004:	b538      	push	{r3, r4, r5, lr}
 8001006:	4d07      	ldr	r5, [pc, #28]	@ (8001024 <_fstat_r+0x20>)
 8001008:	2300      	movs	r3, #0
 800100a:	4604      	mov	r4, r0
 800100c:	4608      	mov	r0, r1
 800100e:	4611      	mov	r1, r2
 8001010:	602b      	str	r3, [r5, #0]
 8001012:	f7ff faf4 	bl	80005fe <_fstat>
 8001016:	1c43      	adds	r3, r0, #1
 8001018:	d102      	bne.n	8001020 <_fstat_r+0x1c>
 800101a:	682b      	ldr	r3, [r5, #0]
 800101c:	b103      	cbz	r3, 8001020 <_fstat_r+0x1c>
 800101e:	6023      	str	r3, [r4, #0]
 8001020:	bd38      	pop	{r3, r4, r5, pc}
 8001022:	bf00      	nop
 8001024:	2000020c 	.word	0x2000020c

08001028 <_isatty_r>:
 8001028:	b538      	push	{r3, r4, r5, lr}
 800102a:	4d06      	ldr	r5, [pc, #24]	@ (8001044 <_isatty_r+0x1c>)
 800102c:	2300      	movs	r3, #0
 800102e:	4604      	mov	r4, r0
 8001030:	4608      	mov	r0, r1
 8001032:	602b      	str	r3, [r5, #0]
 8001034:	f7ff faf3 	bl	800061e <_isatty>
 8001038:	1c43      	adds	r3, r0, #1
 800103a:	d102      	bne.n	8001042 <_isatty_r+0x1a>
 800103c:	682b      	ldr	r3, [r5, #0]
 800103e:	b103      	cbz	r3, 8001042 <_isatty_r+0x1a>
 8001040:	6023      	str	r3, [r4, #0]
 8001042:	bd38      	pop	{r3, r4, r5, pc}
 8001044:	2000020c 	.word	0x2000020c

08001048 <_sbrk_r>:
 8001048:	b538      	push	{r3, r4, r5, lr}
 800104a:	4d06      	ldr	r5, [pc, #24]	@ (8001064 <_sbrk_r+0x1c>)
 800104c:	2300      	movs	r3, #0
 800104e:	4604      	mov	r4, r0
 8001050:	4608      	mov	r0, r1
 8001052:	602b      	str	r3, [r5, #0]
 8001054:	f7ff fafc 	bl	8000650 <_sbrk>
 8001058:	1c43      	adds	r3, r0, #1
 800105a:	d102      	bne.n	8001062 <_sbrk_r+0x1a>
 800105c:	682b      	ldr	r3, [r5, #0]
 800105e:	b103      	cbz	r3, 8001062 <_sbrk_r+0x1a>
 8001060:	6023      	str	r3, [r4, #0]
 8001062:	bd38      	pop	{r3, r4, r5, pc}
 8001064:	2000020c 	.word	0x2000020c

08001068 <_init>:
 8001068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800106a:	bf00      	nop
 800106c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800106e:	bc08      	pop	{r3}
 8001070:	469e      	mov	lr, r3
 8001072:	4770      	bx	lr

08001074 <_fini>:
 8001074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001076:	bf00      	nop
 8001078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800107a:	bc08      	pop	{r3}
 800107c:	469e      	mov	lr, r3
 800107e:	4770      	bx	lr
