
lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000454  08000454  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000454  08000454  00002018  2**0
                  CONTENTS
  4 .ARM          00000000  08000454  08000454  00002018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000454  08000454  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000454  08000454  00001454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000458  08000458  00001458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  0800045c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000018  08000474  00002018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08000474  00002034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000228  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000011e  00000000  00000000  00002270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00002390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004b  00000000  00000000  00002400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f82  00000000  00000000  0000244b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000588  00000000  00000000  000033cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003cc1  00000000  00000000  00003955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00007616  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000010c  00000000  00000000  0000765c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00007768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800043c 	.word	0x0800043c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	0800043c 	.word	0x0800043c

080001d4 <main>:
void LCD_Command(unsigned char command);
void LCD_Data(unsigned char data);
void LCD_Init(void);
void delayMs(int delay);

int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	LCD_Init();
 80001d8:	f000 f87c 	bl	80002d4 <LCD_Init>
	/* Loop forever */

	for (;;)
 80001dc:	bf00      	nop
 80001de:	e7fd      	b.n	80001dc <main+0x8>

080001e0 <GPIO_Init>:
		;
}

void GPIO_Init(void) {
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
	*pAHB1ENR |= 0X06;
 80001e4:	4b11      	ldr	r3, [pc, #68]	@ (800022c <GPIO_Init+0x4c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	681a      	ldr	r2, [r3, #0]
 80001ea:	4b10      	ldr	r3, [pc, #64]	@ (800022c <GPIO_Init+0x4c>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f042 0206 	orr.w	r2, r2, #6
 80001f2:	601a      	str	r2, [r3, #0]
	*pGPIOB_MODER |= 0X5400;
 80001f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000230 <GPIO_Init+0x50>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000230 <GPIO_Init+0x50>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f442 42a8 	orr.w	r2, r2, #21504	@ 0x5400
 8000202:	601a      	str	r2, [r3, #0]
	*pGPIOC_MODER |= 0X00005555;
 8000204:	4b0b      	ldr	r3, [pc, #44]	@ (8000234 <GPIO_Init+0x54>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a0a      	ldr	r2, [pc, #40]	@ (8000234 <GPIO_Init+0x54>)
 800020c:	6812      	ldr	r2, [r2, #0]
 800020e:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 8000212:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 8000216:	6013      	str	r3, [r2, #0]
	*pGPIOB_BSRR = 0X00C; //SET EN AND RW LOW
 8000218:	4b07      	ldr	r3, [pc, #28]	@ (8000238 <GPIO_Init+0x58>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	220c      	movs	r2, #12
 800021e:	601a      	str	r2, [r3, #0]

}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000000 	.word	0x20000000
 8000230:	20000004 	.word	0x20000004
 8000234:	20000008 	.word	0x20000008
 8000238:	20000010 	.word	0x20000010

0800023c <LCD_Command>:
void LCD_Command(unsigned char command) {
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
	// RS=0  RW=0
	*pGPIOB_BSRR = (RS | RW) << 16;
 8000246:	4b0c      	ldr	r3, [pc, #48]	@ (8000278 <LCD_Command+0x3c>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 800024e:	601a      	str	r2, [r3, #0]
	*pGPIOC_ODR = command;
 8000250:	4b0a      	ldr	r3, [pc, #40]	@ (800027c <LCD_Command+0x40>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	79fa      	ldrb	r2, [r7, #7]
 8000256:	601a      	str	r2, [r3, #0]
	*pGPIOB_BSRR = EN; //ENABLE EN
 8000258:	4b07      	ldr	r3, [pc, #28]	@ (8000278 <LCD_Command+0x3c>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	2280      	movs	r2, #128	@ 0x80
 800025e:	601a      	str	r2, [r3, #0]
	delayMs(0);
 8000260:	2000      	movs	r0, #0
 8000262:	f000 f87f 	bl	8000364 <delayMs>
	*pGPIOB_BSRR = EN << 16; //clear EN
 8000266:	4b04      	ldr	r3, [pc, #16]	@ (8000278 <LCD_Command+0x3c>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800026e:	601a      	str	r2, [r3, #0]
	//delayMs(30);

}
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000010 	.word	0x20000010
 800027c:	2000000c 	.word	0x2000000c

08000280 <LCD_Data>:

void LCD_Data(unsigned char data) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
	//RS=1 ,RW=0
	*pGPIOB_BSRR = RS;
 800028a:	4b10      	ldr	r3, [pc, #64]	@ (80002cc <LCD_Data+0x4c>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	2220      	movs	r2, #32
 8000290:	601a      	str	r2, [r3, #0]
	*pGPIOB_BSRR = RW << 16;
 8000292:	4b0e      	ldr	r3, [pc, #56]	@ (80002cc <LCD_Data+0x4c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800029a:	601a      	str	r2, [r3, #0]
	*pGPIOC_ODR = data;
 800029c:	4b0c      	ldr	r3, [pc, #48]	@ (80002d0 <LCD_Data+0x50>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	79fa      	ldrb	r2, [r7, #7]
 80002a2:	601a      	str	r2, [r3, #0]
	*pGPIOB_BSRR = EN; //ENABLE EN
 80002a4:	4b09      	ldr	r3, [pc, #36]	@ (80002cc <LCD_Data+0x4c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2280      	movs	r2, #128	@ 0x80
 80002aa:	601a      	str	r2, [r3, #0]
	delayMs(30);
 80002ac:	201e      	movs	r0, #30
 80002ae:	f000 f859 	bl	8000364 <delayMs>
	*pGPIOB_BSRR = EN << 16; //clear EN
 80002b2:	4b06      	ldr	r3, [pc, #24]	@ (80002cc <LCD_Data+0x4c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80002ba:	601a      	str	r2, [r3, #0]
	delayMs(30);
 80002bc:	201e      	movs	r0, #30
 80002be:	f000 f851 	bl	8000364 <delayMs>

}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	20000010 	.word	0x20000010
 80002d0:	2000000c 	.word	0x2000000c

080002d4 <LCD_Init>:

void LCD_Init(void) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
	unsigned char i = 0;
 80002da:	2300      	movs	r3, #0
 80002dc:	71fb      	strb	r3, [r7, #7]

	GPIO_Init();
 80002de:	f7ff ff7f 	bl	80001e0 <GPIO_Init>
	LCD_Command(0x38); //set b it data mode
 80002e2:	2038      	movs	r0, #56	@ 0x38
 80002e4:	f7ff ffaa 	bl	800023c <LCD_Command>
	delayMs(20);
 80002e8:	2014      	movs	r0, #20
 80002ea:	f000 f83b 	bl	8000364 <delayMs>
	LCD_Command(0x0c); //set b it data mode
 80002ee:	200c      	movs	r0, #12
 80002f0:	f7ff ffa4 	bl	800023c <LCD_Command>
	delayMs(20);
 80002f4:	2014      	movs	r0, #20
 80002f6:	f000 f835 	bl	8000364 <delayMs>
	LCD_Command(0x06); //move the cursor right
 80002fa:	2006      	movs	r0, #6
 80002fc:	f7ff ff9e 	bl	800023c <LCD_Command>
	delayMs(20);
 8000300:	2014      	movs	r0, #20
 8000302:	f000 f82f 	bl	8000364 <delayMs>
	LCD_Command(0x01); //clear screen move cursor home
 8000306:	2001      	movs	r0, #1
 8000308:	f7ff ff98 	bl	800023c <LCD_Command>
	delayMs(20);
 800030c:	2014      	movs	r0, #20
 800030e:	f000 f829 	bl	8000364 <delayMs>
	delayMs(5000);
 8000312:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000316:	f000 f825 	bl	8000364 <delayMs>

	LCD_Command(0x80); //turn display
 800031a:	2080      	movs	r0, #128	@ 0x80
 800031c:	f7ff ff8e 	bl	800023c <LCD_Command>
	delayMs(20);
 8000320:	2014      	movs	r0, #20
 8000322:	f000 f81f 	bl	8000364 <delayMs>
	while (Message[i] != '\0') {
 8000326:	e008      	b.n	800033a <LCD_Init+0x66>
		LCD_Data(Message[i]);
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	4a0d      	ldr	r2, [pc, #52]	@ (8000360 <LCD_Init+0x8c>)
 800032c:	5cd3      	ldrb	r3, [r2, r3]
 800032e:	4618      	mov	r0, r3
 8000330:	f7ff ffa6 	bl	8000280 <LCD_Data>
		i++;
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	3301      	adds	r3, #1
 8000338:	71fb      	strb	r3, [r7, #7]
	while (Message[i] != '\0') {
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	4a08      	ldr	r2, [pc, #32]	@ (8000360 <LCD_Init+0x8c>)
 800033e:	5cd3      	ldrb	r3, [r2, r3]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d1f1      	bne.n	8000328 <LCD_Init+0x54>
	}
	delayMs(50);
 8000344:	2032      	movs	r0, #50	@ 0x32
 8000346:	f000 f80d 	bl	8000364 <delayMs>
	LCD_Command(0xC0); //turn display
 800034a:	20c0      	movs	r0, #192	@ 0xc0
 800034c:	f7ff ff76 	bl	800023c <LCD_Command>
	delayMs(20);
 8000350:	2014      	movs	r0, #20
 8000352:	f000 f807 	bl	8000364 <delayMs>

}
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000014 	.word	0x20000014

08000364 <delayMs>:
void delayMs(int delay) {
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	int i;
	for (; delay > 0; delay--) {
 800036c:	e00d      	b.n	800038a <delayMs+0x26>
		for (i = 0; i < 3195; i++) {
 800036e:	2300      	movs	r3, #0
 8000370:	60fb      	str	r3, [r7, #12]
 8000372:	e002      	b.n	800037a <delayMs+0x16>
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	3301      	adds	r3, #1
 8000378:	60fb      	str	r3, [r7, #12]
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	f640 427a 	movw	r2, #3194	@ 0xc7a
 8000380:	4293      	cmp	r3, r2
 8000382:	ddf7      	ble.n	8000374 <delayMs+0x10>
	for (; delay > 0; delay--) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3b01      	subs	r3, #1
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b00      	cmp	r3, #0
 800038e:	dcee      	bgt.n	800036e <delayMs+0xa>

		}
	}
}
 8000390:	bf00      	nop
 8000392:	bf00      	nop
 8000394:	3714      	adds	r7, #20
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
	...

080003a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a0:	480d      	ldr	r0, [pc, #52]	@ (80003d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a8:	480c      	ldr	r0, [pc, #48]	@ (80003dc <LoopForever+0x6>)
  ldr r1, =_edata
 80003aa:	490d      	ldr	r1, [pc, #52]	@ (80003e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003ac:	4a0d      	ldr	r2, [pc, #52]	@ (80003e4 <LoopForever+0xe>)
  movs r3, #0
 80003ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b0:	e002      	b.n	80003b8 <LoopCopyDataInit>

080003b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003b6:	3304      	adds	r3, #4

080003b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003bc:	d3f9      	bcc.n	80003b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003be:	4a0a      	ldr	r2, [pc, #40]	@ (80003e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c0:	4c0a      	ldr	r4, [pc, #40]	@ (80003ec <LoopForever+0x16>)
  movs r3, #0
 80003c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c4:	e001      	b.n	80003ca <LoopFillZerobss>

080003c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c8:	3204      	adds	r2, #4

080003ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003cc:	d3fb      	bcc.n	80003c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ce:	f000 f811 	bl	80003f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003d2:	f7ff feff 	bl	80001d4 <main>

080003d6 <LoopForever>:

LoopForever:
  b LoopForever
 80003d6:	e7fe      	b.n	80003d6 <LoopForever>
  ldr   r0, =_estack
 80003d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80003e4:	0800045c 	.word	0x0800045c
  ldr r2, =_sbss
 80003e8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80003ec:	20000034 	.word	0x20000034

080003f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f0:	e7fe      	b.n	80003f0 <ADC_IRQHandler>
	...

080003f4 <__libc_init_array>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	4d0d      	ldr	r5, [pc, #52]	@ (800042c <__libc_init_array+0x38>)
 80003f8:	4c0d      	ldr	r4, [pc, #52]	@ (8000430 <__libc_init_array+0x3c>)
 80003fa:	1b64      	subs	r4, r4, r5
 80003fc:	10a4      	asrs	r4, r4, #2
 80003fe:	2600      	movs	r6, #0
 8000400:	42a6      	cmp	r6, r4
 8000402:	d109      	bne.n	8000418 <__libc_init_array+0x24>
 8000404:	4d0b      	ldr	r5, [pc, #44]	@ (8000434 <__libc_init_array+0x40>)
 8000406:	4c0c      	ldr	r4, [pc, #48]	@ (8000438 <__libc_init_array+0x44>)
 8000408:	f000 f818 	bl	800043c <_init>
 800040c:	1b64      	subs	r4, r4, r5
 800040e:	10a4      	asrs	r4, r4, #2
 8000410:	2600      	movs	r6, #0
 8000412:	42a6      	cmp	r6, r4
 8000414:	d105      	bne.n	8000422 <__libc_init_array+0x2e>
 8000416:	bd70      	pop	{r4, r5, r6, pc}
 8000418:	f855 3b04 	ldr.w	r3, [r5], #4
 800041c:	4798      	blx	r3
 800041e:	3601      	adds	r6, #1
 8000420:	e7ee      	b.n	8000400 <__libc_init_array+0xc>
 8000422:	f855 3b04 	ldr.w	r3, [r5], #4
 8000426:	4798      	blx	r3
 8000428:	3601      	adds	r6, #1
 800042a:	e7f2      	b.n	8000412 <__libc_init_array+0x1e>
 800042c:	08000454 	.word	0x08000454
 8000430:	08000454 	.word	0x08000454
 8000434:	08000454 	.word	0x08000454
 8000438:	08000458 	.word	0x08000458

0800043c <_init>:
 800043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043e:	bf00      	nop
 8000440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000442:	bc08      	pop	{r3}
 8000444:	469e      	mov	lr, r3
 8000446:	4770      	bx	lr

08000448 <_fini>:
 8000448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044a:	bf00      	nop
 800044c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044e:	bc08      	pop	{r3}
 8000450:	469e      	mov	lr, r3
 8000452:	4770      	bx	lr
